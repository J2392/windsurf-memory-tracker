"""
WindSurf Memory Tracker - Giao diện chính
----------------------------------------
Tạo cửa sổ chính của ứng dụng với các tính năng:
- Kết nối và nhận thông báo từ WindSurf Editor
- Hiển thị code editor và lịch sử thay đổi
- Hiển thị bảng Kanban cho quản lý task
- Hiển thị thống kê và phân tích
"""

import os
import sys
import datetime
import json
import logging
from typing import List, Dict, Any, Optional, Tuple, Callable
import hashlib
import time
import random

from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
    QLineEdit, QPushButton, QTabWidget, QScrollArea, QSplitter, QFrame, 
    QTextEdit, QToolBar, QStatusBar, QMessageBox, QMenu, QFileDialog, 
    QSizePolicy, QComboBox, QToolButton, QDialog, QDialogButtonBox,
    QFormLayout, QDateTimeEdit, QProgressBar, QListWidget, QListWidgetItem
)
from PyQt6.QtGui import (
    QPixmap, QIcon, QColor, QPalette, QFont, QTextCharFormat, QSyntaxHighlighter,
    QAction, QKeySequence, QTextCursor, QDrag
)
from PyQt6.QtCore import (
    Qt, QSize, QRegularExpression, QDateTime, pyqtSignal, pyqtSlot,
    QTimer, QThread, QObject, QMimeData, QPoint, QUrl
)

# Nhập các module tùy chỉnh
try:
    import models
    from api_client import WindSurfAPIClient
    import ultis
    import ai_helper
    from settings import get_settings, Settings
except ImportError as e:
    print(f"Lỗi khi import module: {e}")
    print("Đảm bảo các file models.py, api_client.py, ultis.py, ai_helper.py và settings.py tồn tại trong cùng thư mục.")
    sys.exit(1)

# Khởi tạo logging
logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("windsurf_app")


# ----- Highlight cú pháp mã nguồn -----

class CodeHighlighter(QSyntaxHighlighter):
    """Syntax highlighter cho trình soạn thảo mã"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        self.highlighting_rules = []
        
        # Class format
        class_format = QTextCharFormat()
        class_format.setForeground(QColor("#C678DD"))
        class_format.setFontWeight(QFont.Weight.Bold)
        pattern = QRegularExpression("\\bclass\\b")
        rule = (pattern, class_format)
        self.highlighting_rules.append(rule)
        
        # Function definition format (def)
        def_format = QTextCharFormat()
        def_format.setForeground(QColor("#61AFEF"))
        def_format.setFontWeight(QFont.Weight.Bold)
        pattern = QRegularExpression("\\bdef\\b")
        rule = (pattern, def_format)
        self.highlighting_rules.append(rule)
        
        # Function name format
        function_format = QTextCharFormat()
        function_format.setForeground(QColor("#61AFEF"))
        pattern = QRegularExpression("(?<=def\\s)\\w+")
        rule = (pattern, function_format)
        self.highlighting_rules.append(rule)
        
        # Special function format (get_content, push, etc)
        special_func_format = QTextCharFormat()
        special_func_format.setForeground(QColor("#61AFEF"))
        pattern = QRegularExpression("\\b(get_content|push|now)\\b")
        rule = (pattern, special_func_format)
        self.highlighting_rules.append(rule)
        
        # Self property access
        self_property_format = QTextCharFormat()
        self_property_format.setForeground(QColor("#E06C75"))
        pattern = QRegularExpression("self\\.(\\w+)")
        rule = (pattern, self_property_format)
        self.highlighting_rules.append(rule)
        
        # Self keyword
        self_format = QTextCharFormat()
        self_format.setForeground(QColor("#E06C75"))
        pattern = QRegularExpression("\\bself\\b")
        rule = (pattern, self_format)
        self.highlighting_rules.append(rule)
        
        # Self method with green (analyze_changes, history.push)
        self_method_format = QTextCharFormat()
        self_method_format.setForeground(QColor("#00FF00"))
        pattern = QRegularExpression("self\\.(analyze_changes|history\\.push)")
        rule = (pattern, self_method_format)
        self.highlighting_rules.append(rule)
        
        # String format - double quotes
        string_format = QTextCharFormat()
        string_format.setForeground(QColor("#98C379"))
        pattern = QRegularExpression("\".*\"")
        pattern.setPatternOptions(QRegularExpression.PatternOption.InvertedGreedinessOption)
        rule = (pattern, string_format)
        self.highlighting_rules.append(rule)
        
        # String format - single quotes
        string_format = QTextCharFormat()
        string_format.setForeground(QColor("#98C379"))
        pattern = QRegularExpression("'.*'")
        pattern.setPatternOptions(QRegularExpression.PatternOption.InvertedGreedinessOption)
        rule = (pattern, string_format)
        self.highlighting_rules.append(rule)
        
        # Comment format
        comment_format = QTextCharFormat()
        comment_format.setForeground(QColor("#5C6370"))
        comment_format.setFontItalic(True)
        pattern = QRegularExpression("#.*")
        rule = (pattern, comment_format)
        self.highlighting_rules.append(rule)
        
        # Number format
        number_format = QTextCharFormat()
        number_format.setForeground(QColor("#D19A66"))
        pattern = QRegularExpression("\\b[0-9]+\\b")
        rule = (pattern, number_format)
        self.highlighting_rules.append(rule)
        
        # Keywords
        keyword_format = QTextCharFormat()
        keyword_format.setForeground(QColor("#C678DD"))
        keywords = [
            "\\bimport\\b", "\\bfrom\\b", "\\breturn\\b",
            "\\bif\\b", "\\belif\\b", "\\belse\\b", "\\bfor\\b", "\\bwhile\\b",
            "\\bin\\b", "\\btry\\b", "\\bexcept\\b", "\\bfinally\\b", "\\bwith\\b",
            "\\bas\\b", "\\bassert\\b", "\\bbreak\\b", "\\bcontinue\\b", "\\bdel\\b"
        ]
        for pattern in keywords:
            expression = QRegularExpression(pattern)
            rule = (expression, keyword_format)
            self.highlighting_rules.append(rule)
    
    def highlightBlock(self, text):
        for pattern, format in self.highlighting_rules:
            matches = pattern.globalMatch(text)
            while matches.hasNext():
                match = matches.next()
                self.setFormat(match.capturedStart(), match.capturedLength(), format)


# ----- Task Dialog -----

class TaskDialog(QDialog):
    """Dialog để tạo hoặc chỉnh sửa task"""
    
    def __init__(self, parent=None, task=None):
        super().__init__(parent)
        
        self.task = task
        self.setup_ui()
        
        if task:
            self.setWindowTitle("Edit Task")
            self.fill_form_data()
        else:
            self.setWindowTitle("Create New Task")
    
    def setup_ui(self):
        """Thiết lập giao diện dialog"""
        self.setMinimumWidth(400)
        
        layout = QVBoxLayout(self)
        
        # Form
        form_layout = QFormLayout()
        
        # Task ID
        self.id_field = QLineEdit()
        if not self.task:
            task_id = f"TASK-{random.randint(100, 999)}"
            self.id_field.setText(task_id)
        form_layout.addRow("Task ID:", self.id_field)
        
        # Title
        self.title_field = QLineEdit()
        form_layout.addRow("Title:", self.title_field)
        
        # Description
        self.description_field = QTextEdit()
        self.description_field.setMinimumHeight(100)
        form_layout.addRow("Description:", self.description_field)
        
        # Status
        self.status_field = QComboBox()
        self.status_field.addItems(["todo", "in_progress", "done"])
        form_layout.addRow("Status:", self.status_field)
        
        # Priority
        self.priority_field = QComboBox()
        self.priority_field.addItems(["Low", "Medium", "High"])
        form_layout.addRow("Priority:", self.priority_field)
        
        # Due date
        self.due_date_field = QDateTimeEdit()
        self.due_date_field.setDateTime(QDateTime.currentDateTime().addDays(7))
        self.due_date_field.setCalendarPopup(True)
        form_layout.addRow("Due Date:", self.due_date_field)
        
        layout.addLayout(form_layout)
        
        # Buttons
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)
        
        layout.addWidget(button_box)
    
    def fill_form_data(self):
        """Điền dữ liệu từ task vào form"""
        if not self.task:
            return
        
        self.id_field.setText(self.task.get("id", ""))
        self.title_field.setText(self.task.get("title", ""))
        self.description_field.setText(self.task.get("description", ""))
        
        # Thiết lập status
        status_index = self.status_field.findText(self.task.get("status", "todo"))
        if status_index >= 0:
            self.status_field.setCurrentIndex(status_index)
        
        # Thiết lập priority
        priority_index = self.priority_field.findText(self.task.get("priority", "Medium"))
        if priority_index >= 0:
            self.priority_field.setCurrentIndex(priority_index)
        
        # Thiết lập due date
        due_date = self.task.get("due_date")
        if due_date:
            if isinstance(due_date, str):
                due_date = QDateTime.fromString(due_date, Qt.DateFormat.ISODate)
            self.due_date_field.setDateTime(due_date)
    
    def get_task_data(self):
        """Lấy dữ liệu task từ form"""
        return {
            "id": self.id_field.text(),
            "title": self.title_field.text(),
            "description": self.description_field.toPlainText(),
            "status": self.status_field.currentText(),
            "priority": self.priority_field.currentText(),
            "due_date": self.due_date_field.dateTime().toString(Qt.DateFormat.ISODate)
        }


# ----- Task Card cho bảng Kanban -----

class TaskCard(QFrame):
    """Widget thẻ công việc Kanban"""
    
    taskMoved = pyqtSignal(str, str)  # id, new_status
    taskSelected = pyqtSignal(str)    # id
    taskEditRequested = pyqtSignal(str)  # id
    
    def __init__(self, task_id: str, title: str, status="todo", priority="High", parent=None):
        super().__init__(parent)
        
        self.task_id = task_id
        self.status = status
        self.title = title
        self.priority = priority
        
        # Thiết lập style
        self.setStyleSheet("""
            QFrame {
                background-color: #15151f;
                padding: 5px;
                margin: 0px;
                border: none;
            }
        """)
        
        # Thiết lập sự kiện
        self.setMinimumHeight(70)
        self.setMouseTracking(True)
        self.setAcceptDrops(True)
        
        # Tạo layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 5, 5, 5)
        
        # Task ID label
        id_label = QLabel(f"[{task_id}]")
        id_label.setStyleSheet("color: #00ff00; font-weight: bold; font-size: 12px;")
        
        # Task title label
        title_label = QLabel(title)
        title_label.setStyleSheet("color: #ffffff; font-size: 12px;")
        title_label.setWordWrap(True)
        
        # Task priority label
        priority_label = QLabel(f"Priority: {priority}")
        priority_label.setStyleSheet("color: #6b6b8d; font-size: 10px;")
        
        # Thêm widget vào layout
        layout.addWidget(id_label)
        layout.addWidget(title_label)
        layout.addWidget(priority_label)
        
        # Thanh trạng thái bên trái
        indicator_color = "#00ff00"  # Màu mặc định
        if status == "in_progress":
            indicator_color = "#FFD700"  # Vàng
        
        indicator = QFrame(self)
        indicator.setFixedWidth(4)
        indicator.setFixedHeight(70)
        indicator.setStyleSheet(f"background-color: {indicator_color}; border: none;")
        indicator.move(0, 0)
    
    def mousePressEvent(self, event):
        """Xử lý sự kiện click chuột"""
        if event.button() == Qt.MouseButton.LeftButton:
            self.taskSelected.emit(self.task_id)
        elif event.button() == Qt.MouseButton.RightButton:
            self.showContextMenu(event.pos())
        
        super().mousePressEvent(event)
    
    def mouseDoubleClickEvent(self, event):
        """Xử lý sự kiện double click"""
        if event.button() == Qt.MouseButton.LeftButton:
            self.taskEditRequested.emit(self.task_id)
        
        super().mouseDoubleClickEvent(event)
    
    def mouseMoveEvent(self, event):
        """Xử lý sự kiện di chuột (để kéo thả)"""
        if event.buttons() & Qt.MouseButton.LeftButton:
            # Tạo mime data để kéo thả
            mime_data = QMimeData()
            mime_data.setText(self.task_id)
            mime_data.setData("application/x-task", self.task_id.encode())
            
            # Tạo pixmap để hiển thị khi kéo
            pixmap = QPixmap(self.size())
            self.render(pixmap)
            
            # Tạo drag object
            drag = QDrag(self)
            drag.setMimeData(mime_data)
            drag.setPixmap(pixmap)
            drag.setHotSpot(event.pos())
            
            # Thực hiện kéo
            drag.exec(Qt.DropAction.MoveAction)
        
        super().mouseMoveEvent(event)
    
    def showContextMenu(self, pos):
        """Hiển thị menu ngữ cảnh khi click chuột phải"""
        context_menu = QMenu(self)
        
        edit_action = context_menu.addAction("Edit Task")
        
        if self.status == "todo":
            move_action = context_menu.addAction("Move to In Progress")
        elif self.status == "in_progress":
            move_action = context_menu.addAction("Move to Done")
        else:
            move_action = context_menu.addAction("Move to To Do")
        
        delete_action = context_menu.addAction("Delete Task")
        
        # Hiển thị menu và xử lý hành động
        action = context_menu.exec(self.mapToGlobal(pos))
        
        if action == edit_action:
            self.taskEditRequested.emit(self.task_id)
        elif action == move_action:
            new_status = ""
            if self.status == "todo":
                new_status = "in_progress"
            elif self.status == "in_progress":
                new_status = "done"
            else:
                new_status = "todo"
            
            self.taskMoved.emit(self.task_id, new_status)
        elif action == delete_action:
            self.parent().parent().parent().remove_task(self.task_id)


class KanbanColumn(QWidget):
    """Widget cho một cột Kanban"""
    
    taskMoved = pyqtSignal(str, str)  # task_id, new_status
    
    def __init__(self, title: str, status: str, parent=None):
        super().__init__(parent)
        
        self.title = title
        self.status = status
        
        # Thiết lập kích thước
        self.setMinimumWidth(255)
        self.setAcceptDrops(True)
        
        # Tạo layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        
        # Tạo tiêu đề
        header = QFrame()
        header.setStyleSheet("""
            QFrame {
                background-color: #0a0a12;
                border: none;
            }
        """)
        header.setFixedHeight(30)
        
        # Thêm tiêu đề vào header
        header_layout = QHBoxLayout(header)
        header_layout.setContentsMargins(0, 0, 0, 0)
        title_label = QLabel(title)
        title_label.setStyleSheet("color: #ffffff; font-weight: bold; font-size: 12px;")
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        # Thêm nút "+" để tạo task mới
        add_button = QPushButton("+")
        add_button.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                color: #00ff00;
                font-weight: bold;
                font-size: 16px;
                border: none;
                max-width: 20px;
            }
            QPushButton:hover {
                color: #ffffff;
            }
        """)
        add_button.clicked.connect(self.add_new_task)
        
        header_layout.addWidget(title_label)
        header_layout.addWidget(add_button, 0, Qt.AlignmentFlag.AlignRight)
        
        # Tạo vùng nội dung
        content = QWidget()
        content.setStyleSheet("""
            QWidget {
                background-color: #121218;
                border: none;
            }
        """)
        
        # Tạo vùng cuộn
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: transparent;
            }
            QScrollBar:vertical {
                border: none;
                background: #121218;
                width: 10px;
                margin: 0px;
            }
            QScrollBar::handle:vertical {
                background: #2a2a3a;
                min-height: 20px;
                border-radius: 5px;
            }
            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                border: none;
                background: none;
            }
            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
                background: none;
            }
        """)
        
        # Tạo container cho task
        task_container = QWidget()
        self.task_layout = QVBoxLayout(task_container)
        self.task_layout.setSpacing(10)
        self.task_layout.setContentsMargins(10, 10, 10, 10)
        self.task_layout.addStretch()
        
        # Thêm task container vào scroll area
        scroll.setWidget(task_container)
        
        # Tạo layout nội dung
        content_layout = QVBoxLayout(content)
        content_layout.setContentsMargins(0, 0, 0, 0)
        content_layout.addWidget(scroll)
        
        # Thêm header và content vào layout
        layout.addWidget(header)
        layout.addWidget(content, 1)
    
    def add_task(self, task_id: str, title: str, priority: str = "Medium") -> TaskCard:
        """Thêm task vào cột"""
        task_card = TaskCard(task_id, title, self.status, priority)
        task_card.taskSelected.connect(self.on_task_selected)
        task_card.taskMoved.connect(self.on_task_moved)
        task_card.taskEditRequested.connect(self.on_task_edit_requested)
        
        self.task_layout.insertWidget(self.task_layout.count() - 1, task_card)
        return task_card
    
    def remove_task(self, task_id: str) -> bool:
        """Xóa task khỏi cột"""
        for i in range(self.task_layout.count() - 1):
            widget = self.task_layout.itemAt(i).widget()
            if isinstance(widget, TaskCard) and widget.task_id == task_id:
                widget.setParent(None)
                return True
        return False
    
    def get_task_count(self) -> int:
        """Lấy số lượng task trong cột"""
        return self.task_layout.count() - 1  # Trừ 1 cho stretch item
    
    def add_new_task(self):
        """Mở dialog để tạo task mới"""
        dialog = TaskDialog(self)
        
        if dialog.exec() == QDialog.DialogCode.Accepted:
            task_data = dialog.get_task_data()
            
            # Thêm task mới
            task_card = self.add_task(task_data["id"], task_data["title"], task_data["priority"])
            
            # Thông báo task mới được tạo
            # TODO: Lưu vào cơ sở dữ liệu
            print(f"Đã tạo task mới: {task_data}")
    
    def on_task_selected(self, task_id: str):
        """Xử lý khi task được chọn"""
        # Truyền sự kiện lên parent widget
        parent = self.parent()
        while parent:
            if hasattr(parent, "on_task_selected"):
                parent.on_task_selected(task_id)
                break
            parent = parent.parent()
    
    def on_task_moved(self, task_id: str, new_status: str):
        """Xử lý khi task được di chuyển"""
        # Truyền sự kiện lên parent widget
        self.taskMoved.emit(task_id, new_status)
    
    def on_task_edit_requested(self, task_id: str):
        """Xử lý khi yêu cầu chỉnh sửa task"""
        # Truyền sự kiện lên parent widget
        parent = self.parent()
        while parent:
            if hasattr(parent, "on_task_edit_requested"):
                parent.on_task_edit_requested(task_id)
                break
            parent = parent.parent()
    
    def dragEnterEvent(self, event):
        """Xử lý sự kiện khi kéo vào vùng"""
        if event.mimeData().hasFormat("application/x-task"):
            event.accept()
        else:
            event.ignore()
    
    def dragMoveEvent(self, event):
        """Xử lý sự kiện khi kéo trong vùng"""
        if event.mimeData().hasFormat("application/x-task"):
            event.accept()
        else:
            event.ignore()
    
    def dropEvent(self, event):
        """Xử lý sự kiện khi thả vào vùng"""
        if event.mimeData().hasFormat("application/x-task"):
            task_id = event.mimeData().data("application/x-task").data().decode()
            
            # Tìm task card nguồn
            source_card = None
            for column in self.parent().findChildren(KanbanColumn):
                for i in range(column.task_layout.count() - 1):
                    widget = column.task_layout.itemAt(i).widget()
                    if isinstance(widget, TaskCard) and widget.task_id == task_id:
                        source_card = widget
                        break
                if source_card:
                    break
            
            if source_card and source_card.status != self.status:
                # Di chuyển task sang cột mới
                self.taskMoved.emit(task_id, self.status)
                event.accept()
            else:
                event.ignore()
        else:
            event.ignore()


# ----- Widget Snapshot -----

class SnapshotList(QWidget):
    """Widget hiển thị danh sách snapshot"""
    
    snapshotSelected = pyqtSignal(dict)  # snapshot_data
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # Thiết lập layout
        layout = QVBoxLayout(self)
        
        # Tiêu đề
        title = QLabel("Snapshots")
        title.setStyleSheet("color: #00ff00; font-weight: bold; font-size: 14px;")
        
        # Danh sách snapshot
        self.list_widget = QListWidget()
        self.list_widget.setStyleSheet("""
            QListWidget {
                background-color: #15151f;
                border: none;
                color: #ffffff;
            }
            QListWidget::item {
                padding: 5px;
                border-bottom: 1px solid #2a2a3a;
            }
            QListWidget::item:selected {
                background-color: #2a2a3a;
                color: #00ff00;
            }
        """)
        self.list_widget.currentItemChanged.connect(self.on_item_selected)
        
        # Thêm widget vào layout
        layout.addWidget(title)
        layout.addWidget(self.list_widget)
    
    def add_snapshot(self, snapshot_data: dict):
        """Thêm snapshot vào danh sách"""
        timestamp = snapshot_data.get("timestamp", datetime.datetime.now())
        formatted_time = timestamp.strftime("%H:%M:%S")
        
        item = QListWidgetItem(f"{formatted_time} - Snapshot #{snapshot_data.get('id', 0)}")
        item.setData(Qt.ItemDataRole.UserRole, snapshot_data)
        
        self.list_widget.addItem(item)
    
    def clear_snapshots(self):
        """Xóa tất cả snapshot"""
        self.list_widget.clear()
    
    def on_item_selected(self, current, previous):
        """Xử lý khi chọn snapshot"""
        if current:
            snapshot_data = current.data(Qt.ItemDataRole.UserRole)
            self.snapshotSelected.emit(snapshot_data)


# ----- Tạo cửa sổ chính -----

class MainWindow(QMainWindow):
    """Cửa sổ chính của ứng dụng"""
    
    def __init__(self):
        super().__init__()
        
        # Thiết lập thuộc tính chính
        self.api_client = None
        self.current_project = None
        self.current_file = None
        self.current_task = None
        self.snapshots = {}  # {file_path: [snapshot1, snapshot2, ...]}
        self.tasks = {}  # {task_id: task_data}
        self.settings = get_settings()
        
        # Thiết lập cửa sổ
        self.setWindowTitle("WindSurf Memory Tracker")
        self.resize(1200, 800)
        
        # Thiết lập style
        self.apply_theme()
        
        # Tạo widget chính
        self.central_widget = QWidget()
        self.main_layout = QVBoxLayout(self.central_widget)
        self.main_layout.setContentsMargins(0, 0, 0, 0)
        self.main_layout.setSpacing(0)
        self.setCentralWidget(self.central_widget)
        
        # Tạo thanh công cụ
        self.create_toolbar()
        
        # Tạo widgets và layout chính
        self.create_main_layout()
        
        # Tạo thanh trạng thái
        self.create_status_bar()
        
        # Khởi tạo API client (giả lập)
        self.init_api_client()
        
        # Khởi tạo cơ sở dữ liệu
        self.init_database()
        
        # Tạo dữ liệu demo
        self.load_sample_data()
        
        # --- DEBUG: Nếu UI không hiện, thêm label test ---
        try:
            debug_label = QLabel("[DEBUG] Nếu bạn thấy dòng này, UI gốc có thể lỗi hoặc chưa add widget con.")
            debug_label.setStyleSheet("color: white; font-size: 20px; background: #222;")
            self.main_layout.addWidget(debug_label)
        except Exception as e:
            import logging
            logging.error(f"[DEBUG] Không thể add label test: {e}")
        
# Thiết lập timer cập nhật
        self.update_timer = QTimer(self)
        self.update_timer.timeout.connect(self.update_ui)
        self.update_timer.start(60000)  # Cập nhật mỗi phút
    
    def apply_theme(self):
        """Áp dụng theme cho ứng dụng"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #000000;
            }
            QWidget {
                color: #ffffff;
                font-family: Arial, sans-serif;
            }
            QPushButton {
                background-color: #121218;
                border: none;
                border-radius: 5px;
                padding: 5px 10px;
                color: #ffffff;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #1f1f2e;
            }
            QPushButton:pressed {
                background-color: #00ff00;
                color: #000000;
            }
            QLineEdit {
                background-color: #1c1c27;
                border: 1px solid #2d2d3d;
                border-radius: 15px;
                padding: 5px 10px;
                color: #ffffff;
            }
            QTextEdit {
                background-color: #000000;
                border: none;
                color: #abb2bf;
                font-family: Consolas, monospace;
                selection-background-color: #2c3e50;
                selection-color: #ffffff;
            }
            QSplitter::handle {
                background-color: #000000;
            }
            QTabBar::tab {
                background-color: #121218;
                color: #6b6b8d;
                padding: 5px 10px;
                margin-right: 2px;
                border: none;
            }
            QTabBar::tab:selected {
                background-color: #00ff00;
                color: #000000;
                font-weight: bold;
            }
            QTabWidget::pane {
                border: none;
            }
            QDialog {
                background-color: #0f0f17;
            }
            QLabel {
                color: #ffffff;
            }
            QComboBox {
                background-color: #1c1c27;
                border: 1px solid #2d2d3d;
                border-radius: 5px;
                padding: 5px;
                color: #ffffff;
            }
            QComboBox::drop-down {
                border: none;
            }
            QComboBox::down-arrow {
                image: none;
                border-left: 5px solid transparent;
                border-right: 5px solid transparent;
                border-top: 5px solid #ffffff;
                width: 0;
                height: 0;
                margin-right: 5px;
            }
            QComboBox QAbstractItemView {
                background-color: #1c1c27;
                border: 1px solid #2d2d3d;
                selection-background-color: #2a2a3a;
                selection-color: #ffffff;
            }
            QDateTimeEdit {
                background-color: #1c1c27;
                border: 1px solid #2d2d3d;
                border-radius: 5px;
                padding: 5px;
                color: #ffffff;
            }
        """)
    
    def create_toolbar(self):
        """Tạo thanh công cụ chính"""
        toolbar = QToolBar()
        toolbar.setStyleSheet("""
            QToolBar {
                background-color: #000000;
                border: none;
                spacing: 10px;
            }
            QToolButton {
                background-color: transparent;
                border: none;
                color: #ffffff;
                font-weight: bold;
                font-size: 16px;
                padding: 5px 10px;
            }
            QToolButton:hover {
                background-color: #1c1c27;
                border-radius: 5px;
            }
        """)
        toolbar.setMovable(False)
        toolbar.setIconSize(QSize(16, 16))
        toolbar.setFixedHeight(60)
        
        # Logo
        logo_label = QLabel()
        logo_label.setFixedSize(36, 36)
        logo_label.setStyleSheet("""
            QLabel {
                background-color: #00ff00;
                border-radius: 4px;
                color: #000000;
                font-weight: bold;
                font-size: 18px;
                text-align: center;
            }
        """)
        logo_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        logo_label.setText("</>");
        
        # Tên ứng dụng
        app_name = QLabel("WindSurf_Memory")
        app_name.setStyleSheet("color: #00ff00; font-weight: bold; font-size: 20px;")
        
        # Các nút menu
        projects_btn = QPushButton("Projects")
        projects_btn.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                border: none;
                color: #ffffff;
                font-weight: bold;
                font-size: 16px;
            }
            QPushButton:hover {
                color: #00ff00;
            }
        """)
        projects_btn.clicked.connect(self.show_projects)
        
        tasks_btn = QPushButton("Tasks")
        tasks_btn.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                border: none;
                color: #ffffff;
                font-weight: bold;
                font-size: 16px;
            }
            QPushButton:hover {
                color: #00ff00;
            }
        """)
        tasks_btn.clicked.connect(self.show_tasks)
        
        analytics_btn = QPushButton("Analytics")
        analytics_btn.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                border: none;
                color: #ffffff;
                font-weight: bold;
                font-size: 16px;
            }
            QPushButton:hover {
                color: #00ff00;
            }
        """)
        analytics_btn.clicked.connect(self.show_analytics)
        
        terminal_btn = QPushButton("Terminal")
        terminal_btn.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                border: none;
                color: #ffffff;
                font-weight: bold;
                font-size: 16px;
            }
            QPushButton:hover {
                color: #00ff00;
            }
        """)
        terminal_btn.clicked.connect(self.show_terminal)
        
        # Spacer
        spacer1 = QWidget()
        spacer1.setSizePolicy(QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Expanding)
        spacer1.setFixedWidth(50)
        
        spacer2 = QWidget()
        spacer2.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        
        # Thanh tìm kiếm
        search_box = QLineEdit()
        search_box.setPlaceholderText("Search...")
        search_box.setFixedWidth(200)
        search_box.setFixedHeight(30)
        search_box.returnPressed.connect(self.search)
        
        # Biểu tượng người dùng
        user_icon = QLabel()
        user_icon.setFixedSize(40, 40)
        user_icon.setStyleSheet("""
            QLabel {
                background-color: #00ff00;
                border-radius: 20px;
            }
        """)
        
        # Thêm widgets vào toolbar
        toolbar.addWidget(logo_label)
        toolbar.addWidget(app_name)
        toolbar.addWidget(spacer1)
        toolbar.addWidget(projects_btn)
        toolbar.addWidget(tasks_btn)
        toolbar.addWidget(analytics_btn)
        toolbar.addWidget(terminal_btn)
        toolbar.addWidget(spacer2)
        toolbar.addWidget(search_box)
        toolbar.addWidget(user_icon)
        
        self.addToolBar(toolbar)
    
    def create_main_layout(self):
        """Tạo layout chính cho ứng dụng"""
        content_widget = QWidget()
        content_layout = QHBoxLayout(content_widget)
        content_layout.setContentsMargins(10, 10, 10, 10)
        
        # Tạo splitter chính giữa nội dung và sidebar
        main_splitter = QSplitter(Qt.Orientation.Horizontal)
        
        # Tạo vùng nội dung chính bên trái
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        left_layout.setContentsMargins(0, 0, 0, 0)
        left_layout.setSpacing(20)
        
        # Tạo editor area
        editor_area = QWidget()
        editor_area_layout = QVBoxLayout(editor_area)
        editor_area_layout.setContentsMargins(0, 0, 0, 0)
        editor_area_layout.setSpacing(0)
        
        # Tab widget cho editor
        self.editor_tab = QTabWidget()
        self.editor_tab.setStyleSheet("""
            QTabWidget::pane {
                background-color: #000000;
                border: none;
            }
            QTabBar::tab {
                background-color: #121218;
                color: #6b6b8d;
                padding: 5px 10px;
                margin-right: 2px;
                border: none;
            }
            QTabBar::tab:selected {
                background-color: #00ff00;
                color: #000000;
                font-weight: bold;
            }
        """)
        
        # Tạo code editor
        self.code_editor = QTextEdit()
        self.code_editor.setPlainText("""class MemoryTracker:
    def __init__(self, editor, options):
        self.editor = editor
        self.options = options
        self.history = []
    
    def track_changes(self):
        snapshot = self.editor.get_content()
        self.analyze_changes(snapshot)
        self.history.push({
            "timestamp": Date.now(),
            "content": snapshot
        })
""")
        self.code_editor.setStyleSheet("""
            QTextEdit {
                background-color: #000000;
                color: #ffffff;
                border: none;
                font-family: Consolas, monospace;
                font-size: 12px;
                padding: 10px;
            }
        """)
        
        # Áp dụng syntax highlighting
        self.highlighter = CodeHighlighter(self.code_editor.document())
        
        # Tạo các editor tab
        self.editor_tab.addTab(self.code_editor, "MemoryTracker.js")
        
        # Tạo tab trống cho các file khác
        empty_widget1 = QWidget()
        empty_widget2 = QWidget()
        self.editor_tab.addTab(empty_widget1, "KanbanBoard.js")
        self.editor_tab.addTab(empty_widget2, "AIAnalyzer.js")
        
        # Thêm tab vào editor area
        editor_area_layout.addWidget(self.editor_tab)
        
        # Tạo tiêu đề cho bảng Kanban
        kanban_label = QLabel("TASK KANBAN")
        kanban_label.setStyleSheet("""
            QLabel {
                background-color: #000000;
                color: #00ff00;
                font-weight: bold;
                font-size: 14px;
                padding: 10px 0;
            }
        """)
        
        # Tạo bảng Kanban
        kanban_widget = QWidget()
        kanban_layout = QHBoxLayout(kanban_widget)
        kanban_layout.setSpacing(15)
        kanban_layout.setContentsMargins(0, 0, 0, 0)
        
        # Tạo các cột Kanban
        self.todo_column = KanbanColumn("TO DO", "todo")
        self.in_progress_column = KanbanColumn("IN PROGRESS", "in_progress")
        self.done_column = KanbanColumn("DONE", "done")
        
        # Kết nối tín hiệu
        self.todo_column.taskMoved.connect(self.move_task)
        self.in_progress_column.taskMoved.connect(self.move_task)
        self.done_column.taskMoved.connect(self.move_task)
        
        # Thêm cột vào layout Kanban
        kanban_layout.addWidget(self.todo_column)
        kanban_layout.addWidget(self.in_progress_column)
        kanban_layout.addWidget(self.done_column)
        
        # Thêm editor và Kanban vào layout trái
        left_layout.addWidget(editor_area, 1)
        left_layout.addWidget(kanban_label)
        left_layout.addWidget(kanban_widget, 1)
        
        # Tạo sidebar phải
        right_widget = QWidget()
        right_widget.setMaximumWidth(310)
        right_widget.setStyleSheet("background-color: #000000;")
        right_layout = QVBoxLayout(right_widget)
        right_layout.setContentsMargins(10, 10, 10, 10)
        right_layout.setSpacing(20)
        
        # Ngày
        self.date_label = QLabel(datetime.datetime.now().strftime("%A, %B %d, %Y"))
        self.date_label.setStyleSheet("color: #6b6b8d; font-size: 14px; text-align: right;")
        self.date_label.setAlignment(Qt.AlignmentFlag.AlignRight)
        
        # Tiêu đề Memory Stats
        stats_header = QLabel("MEMORY STATS")
        stats_header.setStyleSheet("color: #00ff00; font-weight: bold; font-size: 18px;")
        
        # Widget tổng số thay đổi
        total_changes = QFrame()
        total_changes.setStyleSheet("""
            QFrame {
                background-color: #15151f;
                border-radius: 5px;
            }
        """)
        total_changes_layout = QVBoxLayout(total_changes)
        
        changes_title = QLabel("Total Changes Tracked")
        changes_title.setStyleSheet("color: #ffffff; font-size: 14px;")
        
        self.changes_value = QLabel("5,421")
        self.changes_value.setStyleSheet("color: #00ff00; font-weight: bold; font-size: 30px;")
        
        total_changes_layout.addWidget(changes_title)
        total_changes_layout.addWidget(self.changes_value)
        
        # Biểu đồ hoạt động
        activity_title = QLabel("Activity Last 7 Days")
        activity_title.setStyleSheet("color: #ffffff; font-size: 14px;")
        
        activity_graph = QFrame()
        activity_graph.setStyleSheet("""
            QFrame {
                background-color: #15151f;
                border-radius: 5px;
                padding: 10px;
            }
        """)
        activity_graph.setMinimumHeight(100)
        
        graph_placeholder = QLabel("[ Activity Graph Placeholder ]")
        graph_placeholder.setStyleSheet("color: #00ff00; font-size: 14px;")
        graph_placeholder.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        activity_layout = QVBoxLayout(activity_graph)
        activity_layout.addWidget(graph_placeholder)
        
        # Tiêu đề AI Insights
        ai_header = QLabel("AI INSIGHTS")
        ai_header.setStyleSheet("color: #00ff00; font-weight: bold; font-size: 18px;")
        
        # Tiêu đề sức khỏe code
        code_health_title = QLabel("Code Health")
        code_health_title.setStyleSheet("color: #00ff00; font-weight: bold; font-size: 14px;")
        
        # Widget sức khỏe code
        code_health_widget = QFrame()
        code_health_widget.setStyleSheet("""
            QFrame {
                background-color: #15151f;
                border-radius: 5px;
                padding: 10px;
            }
        """)
        
        # Thanh sức khỏe
        health_bar = QFrame()
        health_bar.setFixedHeight(5)
        health_bar.setFixedWidth(184)  # 80% of 230
        health_bar.setStyleSheet("background-color: #00ff00; border-radius: 2px;")
        
        health_value = QLabel("80% - Good")
        health_value.setStyleSheet("color: #ffffff; font-size: 12px;")
        
        health_details = QLabel("Identified 2 potential refactorings")
        health_details.setStyleSheet("color: #6b6b8d; font-size: 10px;")
        
        code_health_layout = QVBoxLayout(code_health_widget)
        code_health_layout.addWidget(health_bar)
        code_health_layout.addWidget(health_value)
        code_health_layout.addWidget(health_details)
        
        # Tiêu đề hoạt động gần đây
        recent_activity_title = QLabel("Recent Activity")
        recent_activity_title.setStyleSheet("color: #00ff00; font-weight: bold; font-size: 14px;")
        
        # Widget hoạt động gần đây
        recent_activity_widget = QFrame()
        recent_activity_widget.setStyleSheet("""
            QFrame {
                background-color: #15151f;
                border-radius: 5px;
                padding: 10px;
            }
        """)
        
        # Tạo layout cho hoạt động gần đây
        recent_activity_layout = QVBoxLayout(recent_activity_widget)
        
        # Thêm các mục hoạt động
        self.activity_items = []
        
        activity1 = QLabel("• Modified MemoryTracker.js")
        activity1.setStyleSheet("color: #ffffff; font-size: 12px;")
        
        time1 = QLabel("5 minutes ago")
        time1.setStyleSheet("color: #6b6b8d; font-size: 10px;")
        
        activity2 = QLabel("• Created KanbanBoard.js")
        activity2.setStyleSheet("color: #ffffff; font-size: 12px;")
        
        time2 = QLabel("47 minutes ago")
        time2.setStyleSheet("color: #6b6b8d; font-size: 10px;")
        
        activity3 = QLabel("• Completed Task-101")
        activity3.setStyleSheet("color: #ffffff; font-size: 12px;")
        
        time3 = QLabel("2 hours ago")
        time3.setStyleSheet("color: #6b6b8d; font-size: 10px;")
        
        # Thêm hoạt động vào layout
        recent_activity_layout.addWidget(activity1)
        recent_activity_layout.addWidget(time1)
        recent_activity_layout.addSpacing(10)
        recent_activity_layout.addWidget(activity2)
        recent_activity_layout.addWidget(time2)
        recent_activity_layout.addSpacing(10)
        recent_activity_layout.addWidget(activity3)
        recent_activity_layout.addWidget(time3)
        
        # Lưu các mục hoạt động để cập nhật sau
        self.activity_items = [
            (activity1, time1),
            (activity2, time2),
            (activity3, time3)
        ]
        
        # Thêm widgets vào sidebar
        right_layout.addWidget(self.date_label)
        right_layout.addWidget(stats_header)
        right_layout.addWidget(total_changes)
        right_layout.addWidget(activity_title)
        right_layout.addWidget(activity_graph)
        right_layout.addWidget(ai_header)
        right_layout.addWidget(code_health_title)
        right_layout.addWidget(code_health_widget)
        right_layout.addWidget(recent_activity_title)
        right_layout.addWidget(recent_activity_widget)
        right_layout.addStretch()
        
        # Thêm widgets vào splitter
        main_splitter.addWidget(left_widget)
        main_splitter.addWidget(right_widget)
        
        # Thiết lập tỷ lệ kéo
        main_splitter.setStretchFactor(0, 7)
        main_splitter.setStretchFactor(1, 3)
        
        # Thêm splitter vào content
        content_layout.addWidget(main_splitter)
        
        # Thêm content vào layout chính
        self.main_layout.addWidget(content_widget)
    
    def create_status_bar(self):
        """Tạo thanh trạng thái"""
        self.statusBar = QStatusBar()
        self.statusBar.setStyleSheet("""
            QStatusBar {
                background-color: #000000;
                color: #00ff00;
            }
        """)
        self.update_status_bar("AI memory tracking initialized | Connected to WindSurf | 2 tasks in progress | Last commit: 12min ago")
        self.setStatusBar(self.statusBar)
    
    def init_api_client(self):
        """Khởi tạo API client"""
        try:
            # Thư mục dự án hiện tại
            current_dir = os.path.dirname(os.path.abspath(__file__))
            
            # Khởi tạo API client giả lập
            self.api_client = WindSurfAPIClient()
            
            # Đăng ký các callback
            self.api_client.on_file_changed(self.handle_file_changed)
            self.api_client.on_file_saved(self.handle_file_saved)
            self.api_client.on_editor_event(self.handle_editor_event)
            
            logger.info("Đã khởi tạo API client")
            
            # Tải thông tin dự án
            self.load_project_info()
            
        except Exception as e:
            logger.error(f"Lỗi khi khởi tạo API client: {e}")
            QMessageBox.critical(self, "Lỗi kết nối", 
                                f"Không thể kết nối với WindSurf Editor: {e}")
    
    def init_database(self):
        """Khởi tạo cơ sở dữ liệu"""
        try:
            models.create_tables()
            logger.info("Đã khởi tạo cơ sở dữ liệu")
        except Exception as e:
            logger.error(f"Lỗi khi khởi tạo cơ sở dữ liệu: {e}")
            QMessageBox.critical(self, "Lỗi cơ sở dữ liệu", 
                                f"Không thể khởi tạo cơ sở dữ liệu: {e}")
    
    def load_project_info(self):
        """Tải thông tin dự án từ API client"""
        if not self.api_client:
            return
        
        # Lấy thông tin dự án
        project = self.api_client.get_active_project()
        if project:
            self.current_project = project
            logger.info(f"Đã tải thông tin dự án: {project['name']}")
    
    def load_sample_data(self):
        """Tải dữ liệu mẫu cho ứng dụng demo"""
        # Tạo task mẫu
        self.tasks = {
            "TASK-101": {
                "id": "TASK-101",
                "title": "Setup project structure",
                "description": "Initialize project and create basic directory structure",
                "status": "done",
                "priority": "High",
                "created_at": datetime.datetime.now() - datetime.timedelta(days=3),
                "due_date": datetime.datetime.now() + datetime.timedelta(days=7)
            },
            "TASK-102": {
                "id": "TASK-102",
                "title": "Create memory tracking",
                "description": "Implement memory tracking functionality for WindSurf Editor",
                "status": "in_progress",
                "priority": "High",
                "created_at": datetime.datetime.now() - datetime.timedelta(days=2),
                "due_date": datetime.datetime.now() + datetime.timedelta(days=5)
            },
            "TASK-104": {
                "id": "TASK-104",
                "title": "Implement AI code analysis",
                "description": "Add AI to analyze code quality and suggest improvements",
                "status": "todo",
                "priority": "High",
                "created_at": datetime.datetime.now() - datetime.timedelta(days=1),
                "due_date": datetime.datetime.now() + datetime.timedelta(days=10)
            },
            "TASK-105": {
                "id": "TASK-105",
                "title": "Add export functionality",
                "description": "Allow exporting task and code history to various formats",
                "status": "todo",
                "priority": "Medium",
                "created_at": datetime.datetime.now() - datetime.timedelta(hours=5),
                "due_date": datetime.datetime.now() + datetime.timedelta(days=14)
            }
        }
        
        # Thêm task vào bảng Kanban
        for task_id, task in self.tasks.items():
            if task["status"] == "todo":
                self.todo_column.add_task(task_id, task["title"], task["priority"])
            elif task["status"] == "in_progress":
                self.in_progress_column.add_task(task_id, task["title"], task["priority"])
            else:
                self.done_column.add_task(task_id, task["title"], task["priority"])
        
        # Cập nhật thời gian hiện tại
        self.update_current_date()
        
        # Cập nhật số lượng thay đổi
        self.update_changes_count(5421)
    
    # ----- Các phương thức xử lý sự kiện -----
    
    def handle_file_changed(self, file_path: str, content: str):
        """Xử lý sự kiện khi file thay đổi"""
        logger.info(f"File thay đổi: {file_path}")
        
        # Thêm vào danh sách snapshot tạm thời
        if file_path not in self.snapshots:
            self.snapshots[file_path] = []
        
        # Chỉ lưu snapshot nếu thay đổi đáng kể
        if not self.snapshots[file_path] or ultis.is_significant_change(
            self.snapshots[file_path][-1], content, threshold=0.01):
            self.snapshots[file_path].append(content)
            logger.info(f"Đã thêm snapshot cho {file_path}")
            
            # Cập nhật giao diện nếu đang xem file này
            if self.current_file == file_path:
                self.update_editor_content(content)
                
            # Cập nhật số lượng thay đổi
            self.update_changes_count(int(self.changes_value.text().replace(',', '')) + 1)
    
    def handle_file_saved(self, file_path: str, content: str):
        """Xử lý sự kiện khi file được lưu"""
        logger.info(f"File được lưu: {file_path}")
        
        # Lưu snapshot
        self.save_snapshot(file_path, content)
        
        # Cập nhật hoạt động gần đây
        self.add_recent_activity(f"Saved {os.path.basename(file_path)}")
        
        # Cập nhật trạng thái
        self.update_status_bar(f"File saved: {os.path.basename(file_path)}")
    
    def handle_editor_event(self, event_data: Dict[str, Any]):
        """Xử lý các sự kiện khác từ editor"""
        logger.info(f"Sự kiện editor: {event_data['type']}")
        
        # Xử lý các loại sự kiện khác nhau
        if event_data['type'] == 'project_opened':
            self.load_project_info()
        elif event_data['type'] == 'file_created':
            self.add_recent_activity(f"Created {os.path.basename(event_data['file_path'])}")
    
    def on_task_selected(self, task_id: str):
        """Xử lý sự kiện khi task được chọn"""
        self.current_task = task_id
        logger.info(f"Task được chọn: {task_id}")
        
        # Hiển thị thông tin task
        if task_id in self.tasks:
            task = self.tasks[task_id]
            self.update_status_bar(f"Selected task: {task_id} - {task['title']}")
            
            # TODO: Hiển thị chi tiết task trong panel
        else:
            self.update_status_bar(f"Selected task: {task_id}")
    
    def on_task_edit_requested(self, task_id: str):
        """Xử lý sự kiện khi yêu cầu chỉnh sửa task"""
        logger.info(f"Yêu cầu chỉnh sửa task: {task_id}")
        
        # Lấy dữ liệu task
        task = self.tasks.get(task_id)
        if not task:
            logger.error(f"Không tìm thấy task: {task_id}")
            return
        
        # Hiển thị dialog chỉnh sửa
        dialog = TaskDialog(self, task)
        
        if dialog.exec() == QDialog.DialogCode.Accepted:
            # Cập nhật dữ liệu task
            pass

import os
import sys
import datetime
import json
import logging
from typing import List, Dict, Any, Optional, Tuple, Callable
import hashlib
import time
import random

from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
    QLineEdit, QPushButton, QTabWidget, QScrollArea, QSplitter, QFrame, 
    QTextEdit, QToolBar, QStatusBar, QMessageBox, QMenu, QFileDialog, 
    QSizePolicy, QComboBox, QToolButton, QDialog, QDialogButtonBox,
    QFormLayout, QDateTimeEdit, QProgressBar, QListWidget, QListWidgetItem
)
from PyQt6.QtGui import (
    QPixmap, QIcon, QColor, QPalette, QFont, QTextCharFormat, QSyntaxHighlighter,
    QAction, QKeySequence, QTextCursor, QDrag
)
from PyQt6.QtCore import (
    Qt, QSize, QRegularExpression, QDateTime, pyqtSignal, pyqtSlot,
    QTimer, QThread, QObject, QMimeData, QPoint, QUrl
)

# Nhập các module tùy chỉnh
try:
    import models
    from api_client import WindSurfAPIClient
    import ultis
    import ai_helper
    from settings import get_settings, Settings
except ImportError as e:
    print(f"Lỗi khi import module: {e}")
    print("Đảm bảo các file models.py, api_client.py, ultis.py, ai_helper.py và settings.py tồn tại trong cùng thư mục.")
    sys.exit(1)

# Khởi tạo logging
logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("windsurf_app")


# ----- Highlight cú pháp mã nguồn -----

class CodeHighlighter(QSyntaxHighlighter):
    """Syntax highlighter cho trình soạn thảo mã"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        self.highlighting_rules = []
        
        # Class format
        class_format = QTextCharFormat()
        class_format.setForeground(QColor("#C678DD"))
        class_format.setFontWeight(QFont.Weight.Bold)
        pattern = QRegularExpression("\\bclass\\b")
        rule = (pattern, class_format)
        self.highlighting_rules.append(rule)
        
        # Function definition format (def)
        def_format = QTextCharFormat()
        def_format.setForeground(QColor("#61AFEF"))
        def_format.setFontWeight(QFont.Weight.Bold)
        pattern = QRegularExpression("\\bdef\\b")
        rule = (pattern, def_format)
        self.highlighting_rules.append(rule)
        
        # Function name format
        function_format = QTextCharFormat()
        function_format.setForeground(QColor("#61AFEF"))
        pattern = QRegularExpression("(?<=def\\s)\\w+")
        rule = (pattern, function_format)
        self.highlighting_rules.append(rule)
        
        # Special function format (get_content, push, etc)
        special_func_format = QTextCharFormat()
        special_func_format.setForeground(QColor("#61AFEF"))
        pattern = QRegularExpression("\\b(get_content|push|now)\\b")
        rule = (pattern, special_func_format)
        self.highlighting_rules.append(rule)
        
        # Self property access
        self_property_format = QTextCharFormat()
        self_property_format.setForeground(QColor("#E06C75"))
        pattern = QRegularExpression("self\\.(\\w+)")
        rule = (pattern, self_property_format)
        self.highlighting_rules.append(rule)
        
        # Self keyword
        self_format = QTextCharFormat()
        self_format.setForeground(QColor("#E06C75"))
        pattern = QRegularExpression("\\bself\\b")
        rule = (pattern, self_format)
        self.highlighting_rules.append(rule)
        
        # Self method with green (analyze_changes, history.push)
        self_method_format = QTextCharFormat()
        self_method_format.setForeground(QColor("#00FF00"))
        pattern = QRegularExpression("self\\.(analyze_changes|history\\.push)")
        rule = (pattern, self_method_format)
        self.highlighting_rules.append(rule)
        
        # String format - double quotes
        string_format = QTextCharFormat()
        string_format.setForeground(QColor("#98C379"))
        pattern = QRegularExpression("\".*\"")
        pattern.setPatternOptions(QRegularExpression.PatternOption.InvertedGreedinessOption)
        rule = (pattern, string_format)
        self.highlighting_rules.append(rule)
        
        # String format - single quotes
        string_format = QTextCharFormat()
        string_format.setForeground(QColor("#98C379"))
        pattern = QRegularExpression("'.*'")
        pattern.setPatternOptions(QRegularExpression.PatternOption.InvertedGreedinessOption)
        rule = (pattern, string_format)
        self.highlighting_rules.append(rule)
        
        # Comment format
        comment_format = QTextCharFormat()
        comment_format.setForeground(QColor("#5C6370"))
        comment_format.setFontItalic(True)
        pattern = QRegularExpression("#.*")
        rule = (pattern, comment_format)
        self.highlighting_rules.append(rule)
        
        # Number format
        number_format = QTextCharFormat()
        number_format.setForeground(QColor("#D19A66"))
        pattern = QRegularExpression("\\b[0-9]+\\b")
        rule = (pattern, number_format)
        self.highlighting_rules.append(rule)
        
        # Keywords
        keyword_format = QTextCharFormat()
        keyword_format.setForeground(QColor("#C678DD"))
        keywords = [
            "\\bimport\\b", "\\bfrom\\b", "\\breturn\\b",
            "\\bif\\b", "\\belif\\b", "\\belse\\b", "\\bfor\\b", "\\bwhile\\b",
            "\\bin\\b", "\\btry\\b", "\\bexcept\\b", "\\bfinally\\b", "\\bwith\\b",
            "\\bas\\b", "\\bassert\\b", "\\bbreak\\b", "\\bcontinue\\b", "\\bdel\\b"
        ]
        for pattern in keywords:
            expression = QRegularExpression(pattern)
            rule = (expression, keyword_format)
            self.highlighting_rules.append(rule)
    
    def highlightBlock(self, text):
        for pattern, format in self.highlighting_rules:
            matches = pattern.globalMatch(text)
            while matches.hasNext():
                match = matches.next()
                self.setFormat(match.capturedStart(), match.capturedLength(), format)


# ----- Task Dialog -----

class TaskDialog(QDialog):
    """Dialog để tạo hoặc chỉnh sửa task"""
    
    def __init__(self, parent=None, task=None):
        super().__init__(parent)
        
        self.task = task
        self.setup_ui()
        
        if task:
            self.setWindowTitle("Edit Task")
            self.fill_form_data()
        else:
            self.setWindowTitle("Create New Task")
    
    def setup_ui(self):
        """Thiết lập giao diện dialog"""
        self.setMinimumWidth(400)
        
        layout = QVBoxLayout(self)
        
        # Form
        form_layout = QFormLayout()
        
        # Task ID
        self.id_field = QLineEdit()
        if not self.task:
            task_id = f"TASK-{random.randint(100, 999)}"
            self.id_field.setText(task_id)
        form_layout.addRow("Task ID:", self.id_field)
        
        # Title
        self.title_field = QLineEdit()
        form_layout.addRow("Title:", self.title_field)
        
        # Description
        self.description_field = QTextEdit()
        self.description_field.setMinimumHeight(100)
        form_layout.addRow("Description:", self.description_field)
        
        # Status
        self.status_field = QComboBox()
        self.status_field.addItems(["todo", "in_progress", "done"])
        form_layout.addRow("Status:", self.status_field)
        
        # Priority
        self.priority_field = QComboBox()
        self.priority_field.addItems(["Low", "Medium", "High"])
        form_layout.addRow("Priority:", self.priority_field)
        
        # Due date
        self.due_date_field = QDateTimeEdit()
        self.due_date_field.setDateTime(QDateTime.currentDateTime().addDays(7))
        self.due_date_field.setCalendarPopup(True)
        form_layout.addRow("Due Date:", self.due_date_field)
        
        layout.addLayout(form_layout)
        
        # Buttons
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)
        
        layout.addWidget(button_box)
    
    def fill_form_data(self):
        """Điền dữ liệu từ task vào form"""
        if not self.task:
            return
        
        self.id_field.setText(self.task.get("id", ""))
        self.title_field.setText(self.task.get("title", ""))
        self.description_field.setText(self.task.get("description", ""))
        
        # Thiết lập status
        status_index = self.status_field.findText(self.task.get("status", "todo"))
        if status_index >= 0:
            self.status_field.setCurrentIndex(status_index)
        
        # Thiết lập priority
        priority_index = self.priority_field.findText(self.task.get("priority", "Medium"))
        if priority_index >= 0:
            self.priority_field.setCurrentIndex(priority_index)
        
        # Thiết lập due date
        due_date = self.task.get("due_date")
        if due_date:
            if isinstance(due_date, str):
                due_date = QDateTime.fromString(due_date, Qt.DateFormat.ISODate)
            self.due_date_field.setDateTime(due_date)
    
    def get_task_data(self):
        """Lấy dữ liệu task từ form"""
        return {
            "id": self.id_field.text(),
            "title": self.title_field.text(),
            "description": self.description_field.toPlainText(),
            "status": self.status_field.currentText(),
            "priority": self.priority_field.currentText(),
            "due_date": self.due_date_field.dateTime().toString(Qt.DateFormat.ISODate)
        }


# ----- Task Card cho bảng Kanban -----

class TaskCard(QFrame):
    """Widget thẻ công việc Kanban"""
    
    taskMoved = pyqtSignal(str, str)  # id, new_status
    taskSelected = pyqtSignal(str)    # id
    taskEditRequested = pyqtSignal(str)  # id
    
    def __init__(self, task_id: str, title: str, status="todo", priority="High", parent=None):
        super().__init__(parent)
        
        self.task_id = task_id
        self.status = status
        self.title = title
        self.priority = priority
        
        # Thiết lập style
        self.setStyleSheet("""
            QFrame {
                background-color: #15151f;
                padding: 5px;
                margin: 0px;
                border: none;
            }
        """)
        
        # Thiết lập sự kiện
        self.setMinimumHeight(70)
        self.setMouseTracking(True)
        self.setAcceptDrops(True)
        
        # Tạo layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 5, 5, 5)
        
        # Task ID label
        id_label = QLabel(f"[{task_id}]")
        id_label.setStyleSheet("color: #00ff00; font-weight: bold; font-size: 12px;")
        
        # Task title label
        title_label = QLabel(title)
        title_label.setStyleSheet("color: #ffffff; font-size: 12px;")
        title_label.setWordWrap(True)
        
        # Task priority label
        priority_label = QLabel(f"Priority: {priority}")
        priority_label.setStyleSheet("color: #6b6b8d; font-size: 10px;")
        
        # Thêm widget vào layout
        layout.addWidget(id_label)
        layout.addWidget(title_label)
        layout.addWidget(priority_label)
        
        # Thanh trạng thái bên trái
        indicator_color = "#00ff00"  # Màu mặc định
        if status == "in_progress":
            indicator_color = "#FFD700"  # Vàng
        
        indicator = QFrame(self)
        indicator.setFixedWidth(4)
        indicator.setFixedHeight(70)
        indicator.setStyleSheet(f"background-color: {indicator_color}; border: none;")
        indicator.move(0, 0)
    
    def mousePressEvent(self, event):
        """Xử lý sự kiện click chuột"""
        if event.button() == Qt.MouseButton.LeftButton:
            self.taskSelected.emit(self.task_id)
        elif event.button() == Qt.MouseButton.RightButton:
            self.showContextMenu(event.pos())
        
        super().mousePressEvent(event)
    
    def mouseDoubleClickEvent(self, event):
        """Xử lý sự kiện double click"""
        if event.button() == Qt.MouseButton.LeftButton:
            self.taskEditRequested.emit(self.task_id)
        
        super().mouseDoubleClickEvent(event)
    
    def mouseMoveEvent(self, event):
        """Xử lý sự kiện di chuột (để kéo thả)"""
        if event.buttons() & Qt.MouseButton.LeftButton:
            # Tạo mime data để kéo thả
            mime_data = QMimeData()
            mime_data.setText(self.task_id)
            mime_data.setData("application/x-task", self.task_id.encode())
            
            # Tạo pixmap để hiển thị khi kéo
            pixmap = QPixmap(self.size())
            self.render(pixmap)
            
            # Tạo drag object
            drag = QDrag(self)
            drag.setMimeData(mime_data)
            drag.setPixmap(pixmap)
            drag.setHotSpot(event.pos())
            
            # Thực hiện kéo
            drag.exec(Qt.DropAction.MoveAction)
        
        super().mouseMoveEvent(event)
    
    def showContextMenu(self, pos):
        """Hiển thị menu ngữ cảnh khi click chuột phải"""
        context_menu = QMenu(self)
        
        edit_action = context_menu.addAction("Edit Task")
        
        if self.status == "todo":
            move_action = context_menu.addAction("Move to In Progress")
        elif self.status == "in_progress":
            move_action = context_menu.addAction("Move to Done")
        else:
            move_action = context_menu.addAction("Move to To Do")
        
        delete_action = context_menu.addAction("Delete Task")
        
        # Hiển thị menu và xử lý hành động
        action = context_menu.exec(self.mapToGlobal(pos))
        
        if action == edit_action:
            self.taskEditRequested.emit(self.task_id)
        elif action == move_action:
            new_status = ""
            if self.status == "todo":
                new_status = "in_progress"
            elif self.status == "in_progress":
                new_status = "done"
            else:
                new_status = "todo"
            
            self.taskMoved.emit(self.task_id, new_status)
        elif action == delete_action:
            self.parent().parent().parent().remove_task(self.task_id)


class KanbanColumn(QWidget):
    """Widget cho một cột Kanban"""
    
    taskMoved = pyqtSignal(str, str)  # task_id, new_status
    
    def __init__(self, title: str, status: str, parent=None):
        super().__init__(parent)
        
        self.title = title
        self.status = status
        
        # Thiết lập kích thước
        self.setMinimumWidth(255)
        self.setAcceptDrops(True)
        
        # Tạo layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        
        # Tạo tiêu đề
        header = QFrame()
        header.setStyleSheet("""
            QFrame {
                background-color: #0a0a12;
                border: none;
            }
        """)
        header.setFixedHeight(30)
        
        # Thêm tiêu đề vào header
        header_layout = QHBoxLayout(header)
        header_layout.setContentsMargins(0, 0, 0, 0)
        title_label = QLabel(title)
        title_label.setStyleSheet("color: #ffffff; font-weight: bold; font-size: 12px;")
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        # Thêm nút "+" để tạo task mới
        add_button = QPushButton("+")
        add_button.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                color: #00ff00;
                font-weight: bold;
                font-size: 16px;
                border: none;
                max-width: 20px;
            }
            QPushButton:hover {
                color: #ffffff;
            }
        """)
        add_button.clicked.connect(self.add_new_task)
        
        header_layout.addWidget(title_label)
        header_layout.addWidget(add_button, 0, Qt.AlignmentFlag.AlignRight)
        
        # Tạo vùng nội dung
        content = QWidget()
        content.setStyleSheet("""
            QWidget {
                background-color: #121218;
                border: none;
            }
        """)
        
        # Tạo vùng cuộn
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: transparent;
            }
            QScrollBar:vertical {
                border: none;
                background: #121218;
                width: 10px;
                margin: 0px;
            }
            QScrollBar::handle:vertical {
                background: #2a2a3a;
                min-height: 20px;
                border-radius: 5px;
            }
            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                border: none;
                background: none;
            }
            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
                background: none;
            }
        """)
        
        # Tạo container cho task
        task_container = QWidget()
        self.task_layout = QVBoxLayout(task_container)
        self.task_layout.setSpacing(10)
        self.task_layout.setContentsMargins(10, 10, 10, 10)
        self.task_layout.addStretch()
        
        # Thêm task container vào scroll area
        scroll.setWidget(task_container)
        
        # Tạo layout nội dung
        content_layout = QVBoxLayout(content)
        content_layout.setContentsMargins(0, 0, 0, 0)
        content_layout.addWidget(scroll)
        
        # Thêm header và content vào layout
        layout.addWidget(header)
        layout.addWidget(content, 1)
    
    def add_task(self, task_id: str, title: str, priority: str = "Medium") -> TaskCard:
        """Thêm task vào cột"""
        task_card = TaskCard(task_id, title, self.status, priority)
        task_card.taskSelected.connect(self.on_task_selected)
        task_card.taskMoved.connect(self.on_task_moved)
        task_card.taskEditRequested.connect(self.on_task_edit_requested)
        
        self.task_layout.insertWidget(self.task_layout.count() - 1, task_card)
        return task_card
    
    def remove_task(self, task_id: str) -> bool:
        """Xóa task khỏi cột"""
        for i in range(self.task_layout.count() - 1):
            widget = self.task_layout.itemAt(i).widget()
            if isinstance(widget, TaskCard) and widget.task_id == task_id:
                widget.setParent(None)
                return True
        return False
    
    def get_task_count(self) -> int:
        """Lấy số lượng task trong cột"""
        return self.task_layout.count() - 1  # Trừ 1 cho stretch item
    
    def add_new_task(self):
        """Mở dialog để tạo task mới"""
        dialog = TaskDialog(self)
        
        if dialog.exec() == QDialog.DialogCode.Accepted:
            task_data = dialog.get_task_data()
            
            # Thêm task mới
            task_card = self.add_task(task_data["id"], task_data["title"], task_data["priority"])
            
            # Thông báo task mới được tạo
            # TODO: Lưu vào cơ sở dữ liệu
            print(f"Đã tạo task mới: {task_data}")
    
    def on_task_selected(self, task_id: str):
        """Xử lý khi task được chọn"""
        # Truyền sự kiện lên parent widget
        parent = self.parent()
        while parent:
            if hasattr(parent, "on_task_selected"):
                parent.on_task_selected(task_id)
                break
            parent = parent.parent()
    
    def on_task_moved(self, task_id: str, new_status: str):
        """Xử lý khi task được di chuyển"""
        # Truyền sự kiện lên parent widget
        self.taskMoved.emit(task_id, new_status)
    
    def on_task_edit_requested(self, task_id: str):
        """Xử lý khi yêu cầu chỉnh sửa task"""
        # Truyền sự kiện lên parent widget
        parent = self.parent()
        while parent:
            if hasattr(parent, "on_task_edit_requested"):
                parent.on_task_edit_requested(task_id)
                break
            parent = parent.parent()
    
    def dragEnterEvent(self, event):
        """Xử lý sự kiện khi kéo vào vùng"""
        if event.mimeData().hasFormat("application/x-task"):
            event.accept()
        else:
            event.ignore()
    
    def dragMoveEvent(self, event):
        """Xử lý sự kiện khi kéo trong vùng"""
        if event.mimeData().hasFormat("application/x-task"):
            event.accept()
        else:
            event.ignore()
    
    def dropEvent(self, event):
        """Xử lý sự kiện khi thả vào vùng"""
        if event.mimeData().hasFormat("application/x-task"):
            task_id = event.mimeData().data("application/x-task").data().decode()
            
            # Tìm task card nguồn
            source_card = None
            for column in self.parent().findChildren(KanbanColumn):
                for i in range(column.task_layout.count() - 1):
                    widget = column.task_layout.itemAt(i).widget()
                    if isinstance(widget, TaskCard) and widget.task_id == task_id:
                        source_card = widget
                        break
                if source_card:
                    break
            
            if source_card and source_card.status != self.status:
                # Di chuyển task sang cột mới
                self.taskMoved.emit(task_id, self.status)
                event.accept()
            else:
                event.ignore()
        else:
            event.ignore()


# ----- Widget Snapshot -----

class SnapshotList(QWidget):
    """Widget hiển thị danh sách snapshot"""
    
    snapshotSelected = pyqtSignal(dict)  # snapshot_data
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # Thiết lập layout
        layout = QVBoxLayout(self)
        
        # Tiêu đề
        title = QLabel("Snapshots")
        title.setStyleSheet("color: #00ff00; font-weight: bold; font-size: 14px;")
        
        # Danh sách snapshot
        self.list_widget = QListWidget()
        self.list_widget.setStyleSheet("""
            QListWidget {
                background-color: #15151f;
                border: none;
                color: #ffffff;
            }
            QListWidget::item {
                padding: 5px;
                border-bottom: 1px solid #2a2a3a;
            }
            QListWidget::item:selected {
                background-color: #2a2a3a;
                color: #00ff00;
            }
        """)
        self.list_widget.currentItemChanged.connect(self.on_item_selected)
        
        # Thêm widget vào layout
        layout.addWidget(title)
        layout.addWidget(self.list_widget)
    
    def add_snapshot(self, snapshot_data: dict):
        """Thêm snapshot vào danh sách"""
        timestamp = snapshot_data.get("timestamp", datetime.datetime.now())
        formatted_time = timestamp.strftime("%H:%M:%S")
        
        item = QListWidgetItem(f"{formatted_time} - Snapshot #{snapshot_data.get('id', 0)}")
        item.setData(Qt.ItemDataRole.UserRole, snapshot_data)
        
        self.list_widget.addItem(item)
    
    def clear_snapshots(self):
        """Xóa tất cả snapshot"""
        self.list_widget.clear()
    
    def on_item_selected(self, current, previous):
        """Xử lý khi chọn snapshot"""
        if current:
            snapshot_data = current.data(Qt.ItemDataRole.UserRole)
            self.snapshotSelected.emit(snapshot_data)


# ----- Tạo cửa sổ chính -----

class MainWindow(QMainWindow):
    """Cửa sổ chính của ứng dụng"""
    
    def __init__(self):
        super().__init__()
        
        # Thiết lập thuộc tính chính
        self.api_client = None
        self.current_project = None
        self.current_file = None
        self.current_task = None
        self.snapshots = {}  # {file_path: [snapshot1, snapshot2, ...]}
        self.tasks = {}  # {task_id: task_data}
        self.settings = get_settings()
        
        # Thiết lập cửa sổ
        self.setWindowTitle("WindSurf Memory Tracker")
        self.resize(1200, 800)
        
        # Thiết lập style
        self.apply_theme()
        
        # Tạo widget chính
        self.central_widget = QWidget()
        self.main_layout = QVBoxLayout(self.central_widget)
        self.main_layout.setContentsMargins(0, 0, 0, 0)
        self.main_layout.setSpacing(0)
        self.setCentralWidget(self.central_widget)
        
        # Tạo thanh công cụ
        self.create_toolbar()
        
        # Tạo widgets và layout chính
        self.create_main_layout()
        
        # Tạo thanh trạng thái
        self.create_status_bar()
        
        # Khởi tạo API client (giả lập)
        self.init_api_client()
        
        # Khởi tạo cơ sở dữ liệu
        self.init_database()
        
        # Tạo dữ liệu demo
        self.load_sample_data()
        
        # Thiết lập timer cập nhật
        self.update_timer = QTimer(self)
        self.update_timer.timeout.connect(self.update_ui)
        # Thiết lập timer cập nhật
        self.update_timer = QTimer(self)
        self.update_timer.timeout.connect(self.update_ui)
        self.update_timer.start(60000)  # Cập nhật mỗi phút
    
    def apply_theme(self):
        """Áp dụng theme cho ứng dụng"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #000000;
            }
            QWidget {
                color: #ffffff;
                font-family: Arial, sans-serif;
            }
            QPushButton {
                background-color: #121218;
                border: none;
                border-radius: 5px;
                padding: 5px 10px;
                color: #ffffff;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #1f1f2e;
            }
            QPushButton:pressed {
                background-color: #00ff00;
                color: #000000;
            }
            QLineEdit {
                background-color: #1c1c27;
                border: 1px solid #2d2d3d;
                border-radius: 15px;
                padding: 5px 10px;
                color: #ffffff;
            }
            QTextEdit {
                background-color: #000000;
                border: none;
                color: #abb2bf;
                font-family: Consolas, monospace;
                selection-background-color: #2c3e50;
                selection-color: #ffffff;
            }
            QSplitter::handle {
                background-color: #000000;
            }
            QTabBar::tab {
                background-color: #121218;
                color: #6b6b8d;
                padding: 5px 10px;
                margin-right: 2px;
                border: none;
            }
            QTabBar::tab:selected {
                background-color: #00ff00;
                color: #000000;
                font-weight: bold;
            }
            QTabWidget::pane {
                border: none;
            }
            QDialog {
                background-color: #0f0f17;
            }
            QLabel {
                color: #ffffff;
            }
            QComboBox {
                background-color: #1c1c27;
                border: 1px solid #2d2d3d;
                border-radius: 5px;
                padding: 5px;
                color: #ffffff;
            }
            QComboBox::drop-down {
                border: none;
            }
            QComboBox::down-arrow {
                image: none;
                border-left: 5px solid transparent;
                border-right: 5px solid transparent;
                border-top: 5px solid #ffffff;
                width: 0;
                height: 0;
                margin-right: 5px;
            }
            QComboBox QAbstractItemView {
                background-color: #1c1c27;
                border: 1px solid #2d2d3d;
                selection-background-color: #2a2a3a;
                selection-color: #ffffff;
            }
            QDateTimeEdit {
                background-color: #1c1c27;
                border: 1px solid #2d2d3d;
                border-radius: 5px;
                padding: 5px;
                color: #ffffff;
            }
        """)
    
    def create_toolbar(self):
        """Tạo thanh công cụ chính"""
        toolbar = QToolBar()
        toolbar.setStyleSheet("""
            QToolBar {
                background-color: #000000;
                border: none;
                spacing: 10px;
            }
            QToolButton {
                background-color: transparent;
                border: none;
                color: #ffffff;
                font-weight: bold;
                font-size: 16px;
                padding: 5px 10px;
            }
            QToolButton:hover {
                background-color: #1c1c27;
                border-radius: 5px;
            }
        """)
        toolbar.setMovable(False)
        toolbar.setIconSize(QSize(16, 16))
        toolbar.setFixedHeight(60)
        
        # Logo
        logo_label = QLabel()
        logo_label.setFixedSize(36, 36)
        logo_label.setStyleSheet("""
            QLabel {
                background-color: #00ff00;
                border-radius: 4px;
                color: #000000;
                font-weight: bold;
                font-size: 18px;
                text-align: center;
            }
        """)
        logo_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        logo_label.setText("</>");
        
        # Tên ứng dụng
        app_name = QLabel("WindSurf_Memory")
        app_name.setStyleSheet("color: #00ff00; font-weight: bold; font-size: 20px;")
        
        # Các nút menu
        projects_btn = QPushButton("Projects")
        projects_btn.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                border: none;
                color: #ffffff;
                font-weight: bold;
                font-size: 16px;
            }
            QPushButton:hover {
                color: #00ff00;
            }
        """)
        projects_btn.clicked.connect(self.show_projects)
        
        tasks_btn = QPushButton("Tasks")
        tasks_btn.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                border: none;
                color: #ffffff;
                font-weight: bold;
                font-size: 16px;
            }
            QPushButton:hover {
                color: #00ff00;
            }
        """)
        tasks_btn.clicked.connect(self.show_tasks)
        
        analytics_btn = QPushButton("Analytics")
        analytics_btn.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                border: none;
                color: #ffffff;
                font-weight: bold;
                font-size: 16px;
            }
            QPushButton:hover {
                color: #00ff00;
            }
        """)
        analytics_btn.clicked.connect(self.show_analytics)
        
        terminal_btn = QPushButton("Terminal")
        terminal_btn.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                border: none;
                color: #ffffff;
                font-weight: bold;
                font-size: 16px;
            }
            QPushButton:hover {
                color: #00ff00;
            }
        """)
        terminal_btn.clicked.connect(self.show_terminal)
        
        # Spacer
        spacer1 = QWidget()
        spacer1.setSizePolicy(QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Expanding)
        spacer1.setFixedWidth(50)
        
        spacer2 = QWidget()
        spacer2.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        
        # Thanh tìm kiếm
        search_box = QLineEdit()
        search_box.setPlaceholderText("Search...")
        search_box.setFixedWidth(200)
        search_box.setFixedHeight(30)
        search_box.returnPressed.connect(self.search)
        
        # Biểu tượng người dùng
        user_icon = QLabel()
        user_icon.setFixedSize(40, 40)
        user_icon.setStyleSheet("""
            QLabel {
                background-color: #00ff00;
                border-radius: 20px;
            }
        """)
        
        # Thêm widgets vào toolbar
        toolbar.addWidget(logo_label)
        toolbar.addWidget(app_name)
        toolbar.addWidget(spacer1)
        toolbar.addWidget(projects_btn)
        toolbar.addWidget(tasks_btn)
        toolbar.addWidget(analytics_btn)
        toolbar.addWidget(terminal_btn)
        toolbar.addWidget(spacer2)
        toolbar.addWidget(search_box)
        toolbar.addWidget(user_icon)
        
        self.addToolBar(toolbar)
    
    def create_main_layout(self):
        """Tạo layout chính cho ứng dụng"""
        content_widget = QWidget()
        content_layout = QHBoxLayout(content_widget)
        content_layout.setContentsMargins(10, 10, 10, 10)
        
        # Tạo splitter chính giữa nội dung và sidebar
        main_splitter = QSplitter(Qt.Orientation.Horizontal)
        
        # Tạo vùng nội dung chính bên trái
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        left_layout.setContentsMargins(0, 0, 0, 0)
        left_layout.setSpacing(20)
        
        # Tạo editor area
        editor_area = QWidget()
        editor_area_layout = QVBoxLayout(editor_area)
        editor_area_layout.setContentsMargins(0, 0, 0, 0)
        editor_area_layout.setSpacing(0)
        
        # Tab widget cho editor
        self.editor_tab = QTabWidget()
        self.editor_tab.setStyleSheet("""
            QTabWidget::pane {
                background-color: #000000;
                border: none;
            }
            QTabBar::tab {
                background-color: #121218;
                color: #6b6b8d;
                padding: 5px 10px;
                margin-right: 2px;
                border: none;
            }
            QTabBar::tab:selected {
                background-color: #00ff00;
                color: #000000;
                font-weight: bold;
            }
        """)
        
        # Tạo code editor
        self.code_editor = QTextEdit()
        self.code_editor.setPlainText("""class MemoryTracker:
    def __init__(self, editor, options):
        self.editor = editor
        self.options = options
        self.history = []
    
    def track_changes(self):
        snapshot = self.editor.get_content()
        self.analyze_changes(snapshot)
        self.history.push({
            "timestamp": Date.now(),
            "content": snapshot
        })
""")
        self.code_editor.setStyleSheet("""
            QTextEdit {
                background-color: #000000;
                color: #ffffff;
                border: none;
                font-family: Consolas, monospace;
                font-size: 12px;
                padding: 10px;
            }
        """)
        
        # Áp dụng syntax highlighting
        self.highlighter = CodeHighlighter(self.code_editor.document())
        
        # Tạo các editor tab
        self.editor_tab.addTab(self.code_editor, "MemoryTracker.js")
        
        # Tạo tab trống cho các file khác
        empty_widget1 = QWidget()
        empty_widget2 = QWidget()
        self.editor_tab.addTab(empty_widget1, "KanbanBoard.js")
        self.editor_tab.addTab(empty_widget2, "AIAnalyzer.js")
        
        # Thêm tab vào editor area
        editor_area_layout.addWidget(self.editor_tab)
        
        # Tạo tiêu đề cho bảng Kanban
        kanban_label = QLabel("TASK KANBAN")
        kanban_label.setStyleSheet("""
            QLabel {
                background-color: #000000;
                color: #00ff00;
                font-weight: bold;
                font-size: 14px;
                padding: 10px 0;
            }
        """)
        
        # Tạo bảng Kanban
        kanban_widget = QWidget()
        kanban_layout = QHBoxLayout(kanban_widget)
        kanban_layout.setSpacing(15)
        kanban_layout.setContentsMargins(0, 0, 0, 0)
        
        # Tạo các cột Kanban
        self.todo_column = KanbanColumn("TO DO", "todo")
        self.in_progress_column = KanbanColumn("IN PROGRESS", "in_progress")
        self.done_column = KanbanColumn("DONE", "done")
        
        # Kết nối tín hiệu
        self.todo_column.taskMoved.connect(self.move_task)
        self.in_progress_column.taskMoved.connect(self.move_task)
        self.done_column.taskMoved.connect(self.move_task)
        
        # Thêm cột vào layout Kanban
        kanban_layout.addWidget(self.todo_column)
        kanban_layout.addWidget(self.in_progress_column)
        kanban_layout.addWidget(self.done_column)
        
        # Thêm editor và Kanban vào layout trái
        left_layout.addWidget(editor_area, 1)
        left_layout.addWidget(kanban_label)
        left_layout.addWidget(kanban_widget, 1)
        
        # Tạo sidebar phải
        right_widget = QWidget()
        right_widget.setMaximumWidth(310)
        right_widget.setStyleSheet("background-color: #000000;")
        right_layout = QVBoxLayout(right_widget)
        right_layout.setContentsMargins(10, 10, 10, 10)
        right_layout.setSpacing(20)
        
        # Ngày
        self.date_label = QLabel(datetime.datetime.now().strftime("%A, %B %d, %Y"))
        self.date_label.setStyleSheet("color: #6b6b8d; font-size: 14px; text-align: right;")
        self.date_label.setAlignment(Qt.AlignmentFlag.AlignRight)
        
        # Tiêu đề Memory Stats
        stats_header = QLabel("MEMORY STATS")
        stats_header.setStyleSheet("color: #00ff00; font-weight: bold; font-size: 18px;")
        
        # Widget tổng số thay đổi
        total_changes = QFrame()
        total_changes.setStyleSheet("""
            QFrame {
                background-color: #15151f;
                border-radius: 5px;
            }
        """)
        total_changes_layout = QVBoxLayout(total_changes)
        
        changes_title = QLabel("Total Changes Tracked")
        changes_title.setStyleSheet("color: #ffffff; font-size: 14px;")
        
        self.changes_value = QLabel("5,421")
        self.changes_value.setStyleSheet("color: #00ff00; font-weight: bold; font-size: 30px;")
        
        total_changes_layout.addWidget(changes_title)
        total_changes_layout.addWidget(self.changes_value)
        
        # Biểu đồ hoạt động
        activity_title = QLabel("Activity Last 7 Days")
        activity_title.setStyleSheet("color: #ffffff; font-size: 14px;")
        
        activity_graph = QFrame()
        activity_graph.setStyleSheet("""
            QFrame {
                background-color: #15151f;
                border-radius: 5px;
                padding: 10px;
            }
        """)
        activity_graph.setMinimumHeight(100)
        
        graph_placeholder = QLabel("[ Activity Graph Placeholder ]")
        graph_placeholder.setStyleSheet("color: #00ff00; font-size: 14px;")
        graph_placeholder.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        activity_layout = QVBoxLayout(activity_graph)
        activity_layout.addWidget(graph_placeholder)
        
        # Tiêu đề AI Insights
        ai_header = QLabel("AI INSIGHTS")
        ai_header.setStyleSheet("color: #00ff00; font-weight: bold; font-size: 18px;")
        
        # Tiêu đề sức khỏe code
        code_health_title = QLabel("Code Health")
        code_health_title.setStyleSheet("color: #00ff00; font-weight: bold; font-size: 14px;")
        
        # Widget sức khỏe code
        code_health_widget = QFrame()
        code_health_widget.setStyleSheet("""
            QFrame {
                background-color: #15151f;
                border-radius: 5px;
                padding: 10px;
            }
        """)
        
        # Thanh sức khỏe
        health_bar = QFrame()
        health_bar.setFixedHeight(5)
        health_bar.setFixedWidth(184)  # 80% of 230
        health_bar.setStyleSheet("background-color: #00ff00; border-radius: 2px;")
        
        health_value = QLabel("80% - Good")
        health_value.setStyleSheet("color: #ffffff; font-size: 12px;")
        
        health_details = QLabel("Identified 2 potential refactorings")
        health_details.setStyleSheet("color: #6b6b8d; font-size: 10px;")
        
        code_health_layout = QVBoxLayout(code_health_widget)
        code_health_layout.addWidget(health_bar)
        code_health_layout.addWidget(health_value)
        code_health_layout.addWidget(health_details)
        
        # Tiêu đề hoạt động gần đây
        recent_activity_title = QLabel("Recent Activity")
        recent_activity_title.setStyleSheet("color: #00ff00; font-weight: bold; font-size: 14px;")
        
        # Widget hoạt động gần đây
        recent_activity_widget = QFrame()
        recent_activity_widget.setStyleSheet("""
            QFrame {
                background-color: #15151f;
                border-radius: 5px;
                padding: 10px;
            }
        """)
        
        # Tạo layout cho hoạt động gần đây
        recent_activity_layout = QVBoxLayout(recent_activity_widget)
        
        # Thêm các mục hoạt động
        self.activity_items = []
        
        activity1 = QLabel("• Modified MemoryTracker.js")
        activity1.setStyleSheet("color: #ffffff; font-size: 12px;")
        
        time1 = QLabel("5 minutes ago")
        time1.setStyleSheet("color: #6b6b8d; font-size: 10px;")
        
        activity2 = QLabel("• Created KanbanBoard.js")
        activity2.setStyleSheet("color: #ffffff; font-size: 12px;")
        
        time2 = QLabel("47 minutes ago")
        time2.setStyleSheet("color: #6b6b8d; font-size: 10px;")
        
        activity3 = QLabel("• Completed Task-101")
        activity3.setStyleSheet("color: #ffffff; font-size: 12px;")
        
        time3 = QLabel("2 hours ago")
        time3.setStyleSheet("color: #6b6b8d; font-size: 10px;")
        
        # Thêm hoạt động vào layout
        recent_activity_layout.addWidget(activity1)
        recent_activity_layout.addWidget(time1)
        recent_activity_layout.addSpacing(10)
        recent_activity_layout.addWidget(activity2)
        recent_activity_layout.addWidget(time2)
        recent_activity_layout.addSpacing(10)
        recent_activity_layout.addWidget(activity3)
        recent_activity_layout.addWidget(time3)
        
        # Lưu các mục hoạt động để cập nhật sau
        self.activity_items = [
            (activity1, time1),
            (activity2, time2),
            (activity3, time3)
        ]
        
        # Thêm widgets vào sidebar
        right_layout.addWidget(self.date_label)
        right_layout.addWidget(stats_header)
        right_layout.addWidget(total_changes)
        right_layout.addWidget(activity_title)
        right_layout.addWidget(activity_graph)
        right_layout.addWidget(ai_header)
        right_layout.addWidget(code_health_title)
        right_layout.addWidget(code_health_widget)
        right_layout.addWidget(recent_activity_title)
        right_layout.addWidget(recent_activity_widget)
        right_layout.addStretch()
        
        # Thêm widgets vào splitter
        main_splitter.addWidget(left_widget)
        main_splitter.addWidget(right_widget)
        
        # Thiết lập tỷ lệ kéo
        main_splitter.setStretchFactor(0, 7)
        main_splitter.setStretchFactor(1, 3)
        
        # Thêm splitter vào content
        content_layout.addWidget(main_splitter)
        
        # Thêm content vào layout chính
        self.main_layout.addWidget(content_widget)
    
    def create_status_bar(self):
        """Tạo thanh trạng thái"""
        self.statusBar = QStatusBar()
        self.statusBar.setStyleSheet("""
            QStatusBar {
                background-color: #000000;
                color: #00ff00;
            }
        """)
        self.update_status_bar("AI memory tracking initialized | Connected to WindSurf | 2 tasks in progress | Last commit: 12min ago")
        self.setStatusBar(self.statusBar)
    
    def init_api_client(self):
        """Khởi tạo API client"""
        try:
            # Thư mục dự án hiện tại
            current_dir = os.path.dirname(os.path.abspath(__file__))
            
            # Khởi tạo API client giả lập
            self.api_client = WindSurfAPIClient()
            
            # Đăng ký các callback
            self.api_client.on_file_changed(self.handle_file_changed)
            self.api_client.on_file_saved(self.handle_file_saved)
            self.api_client.on_editor_event(self.handle_editor_event)
            
            logger.info("Đã khởi tạo API client")
            
            # Tải thông tin dự án
            self.load_project_info()
            
        except Exception as e:
            logger.error(f"Lỗi khi khởi tạo API client: {e}")
            QMessageBox.critical(self, "Lỗi kết nối", 
                                f"Không thể kết nối với WindSurf Editor: {e}")
    
    def init_database(self):
        """Khởi tạo cơ sở dữ liệu"""
        try:
            models.create_tables()
            logger.info("Đã khởi tạo cơ sở dữ liệu")
        except Exception as e:
            logger.error(f"Lỗi khi khởi tạo cơ sở dữ liệu: {e}")
            QMessageBox.critical(self, "Lỗi cơ sở dữ liệu", 
                                f"Không thể khởi tạo cơ sở dữ liệu: {e}")
    
    def load_project_info(self):
        """Tải thông tin dự án từ API client"""
        if not self.api_client:
            return
        
        # Lấy thông tin dự án
        project = self.api_client.get_active_project()
        if project:
            self.current_project = project
            logger.info(f"Đã tải thông tin dự án: {project['name']}")
    
    def load_sample_data(self):
        """Tải dữ liệu mẫu cho ứng dụng demo"""
        # Tạo task mẫu
        self.tasks = {
            "TASK-101": {
                "id": "TASK-101",
                "title": "Setup project structure",
                "description": "Initialize project and create basic directory structure",
                "status": "done",
                "priority": "High",
                "created_at": datetime.datetime.now() - datetime.timedelta(days=3),
                "due_date": datetime.datetime.now() + datetime.timedelta(days=7)
            },
            "TASK-102": {
                "id": "TASK-102",
                "title": "Create memory tracking",
                "description": "Implement memory tracking functionality for WindSurf Editor",
                "status": "in_progress",
                "priority": "High",
                "created_at": datetime.datetime.now() - datetime.timedelta(days=2),
                "due_date": datetime.datetime.now() + datetime.timedelta(days=5)
            },
            "TASK-104": {
                "id": "TASK-104",
                "title": "Implement AI code analysis",
                "description": "Add AI to analyze code quality and suggest improvements",
                "status": "todo",
                "priority": "High",
                "created_at": datetime.datetime.now() - datetime.timedelta(days=1),
                "due_date": datetime.datetime.now() + datetime.timedelta(days=10)
            },
            "TASK-105": {
                "id": "TASK-105",
                "title": "Add export functionality",
                "description": "Allow exporting task and code history to various formats",
                "status": "todo",
                "priority": "Medium",
                "created_at": datetime.datetime.now() - datetime.timedelta(hours=5),
                "due_date": datetime.datetime.now() + datetime.timedelta(days=14)
            }
        }
        
        # Thêm task vào bảng Kanban
        for task_id, task in self.tasks.items():
            if task["status"] == "todo":
                self.todo_column.add_task(task_id, task["title"], task["priority"])
            elif task["status"] == "in_progress":
                self.in_progress_column.add_task(task_id, task["title"], task["priority"])
            else:
                self.done_column.add_task(task_id, task["title"], task["priority"])
        
        # Cập nhật thời gian hiện tại
        self.update_current_date()
        
        # Cập nhật số lượng thay đổi
        self.update_changes_count(5421)
    
    # ----- Các phương thức xử lý sự kiện -----
    
    def handle_file_changed(self, file_path: str, content: str):
        """Xử lý sự kiện khi file thay đổi"""
        logger.info(f"File thay đổi: {file_path}")
        
        # Thêm vào danh sách snapshot tạm thời
        if file_path not in self.snapshots:
            self.snapshots[file_path] = []
        
        # Chỉ lưu snapshot nếu thay đổi đáng kể
        if not self.snapshots[file_path] or ultis.is_significant_change(
            self.snapshots[file_path][-1], content, threshold=0.01):
            self.snapshots[file_path].append(content)
            logger.info(f"Đã thêm snapshot cho {file_path}")
            
            # Cập nhật giao diện nếu đang xem file này
            if self.current_file == file_path:
                self.update_editor_content(content)
                
            # Cập nhật số lượng thay đổi
            self.update_changes_count(int(self.changes_value.text().replace(',', '')) + 1)
    
    def handle_file_saved(self, file_path: str, content: str):
        """Xử lý sự kiện khi file được lưu"""
        logger.info(f"File được lưu: {file_path}")
        
        # Lưu snapshot
        self.save_snapshot(file_path, content)
        
        # Cập nhật hoạt động gần đây
        self.add_recent_activity(f"Saved {os.path.basename(file_path)}")
        
        # Cập nhật trạng thái
        self.update_status_bar(f"File saved: {os.path.basename(file_path)}")
    
    def handle_editor_event(self, event_data: Dict[str, Any]):
        """Xử lý các sự kiện khác từ editor"""
        logger.info(f"Sự kiện editor: {event_data['type']}")
        
        # Xử lý các loại sự kiện khác nhau
        if event_data['type'] == 'project_opened':
            self.load_project_info()
        elif event_data['type'] == 'file_created':
            self.add_recent_activity(f"Created {os.path.basename(event_data['file_path'])}")
    
    def on_task_selected(self, task_id: str):
        """Xử lý sự kiện khi task được chọn"""
        self.current_task = task_id
        logger.info(f"Task được chọn: {task_id}")
        
        # Hiển thị thông tin task
        if task_id in self.tasks:
            task = self.tasks[task_id]
            self.update_status_bar(f"Selected task: {task_id} - {task['title']}")
            
            # TODO: Hiển thị chi tiết task trong panel
        else:
            self.update_status_bar(f"Selected task: {task_id}")
    
        if old_status == "todo":
            self.todo_column.remove_task(task_id)
        elif old_status == "in_progress":
            self.in_progress_column.remove_task(task_id)
        else:
            self.done_column.remove_task(task_id)
        
        # Thêm lại với dữ liệu mới
        if old_status == "todo":
            self.todo_column.add_task(task_id, task["title"], task["priority"])
        elif old_status == "in_progress":
            self.in_progress_column.add_task(task_id, task["title"], task["priority"])
        else:
            self.done_column.add_task(task_id, task["title"], task["priority"])
    
    # ----- Các phương thức tiện ích -----
    
    def update_status_bar(self, message: str):
        """Cập nhật thông báo trên thanh trạng thái"""
        self.statusBar.showMessage(message)
    
    def update_current_date(self):
        """Cập nhật ngày hiện tại"""
        current_date = datetime.datetime.now().strftime("%A, %B %d, %Y")
        self.date_label.setText(current_date)
    
    def update_changes_count(self, count: int):
        """Cập nhật số lượng thay đổi được theo dõi"""
        self.changes_value.setText(f"{count:,}")
    
    def add_recent_activity(self, activity: str):
        """Thêm hoạt động mới vào danh sách gần đây"""
        try:
            # Tạo thời gian hiện tại
            timestamp = datetime.datetime.now()
            logger.info(f"Định dạng thời gian cho hoạt động: {activity}")
            formatted_time = ultis.format_time_ago(timestamp)
            logger.info(f"Thời gian đã định dạng: {formatted_time}")
            
            # Tạo widget mới
            activity_label = QLabel(f"• {activity}")
            activity_label.setStyleSheet("color: #ffffff; font-size: 12px;")
            
            time_label = QLabel(formatted_time)
            time_label.setStyleSheet("color: #6b6b8d; font-size: 10px;")
            logger.info(f"Đã tạo widget cho hoạt động: {activity}")
        except Exception as e:
            logger.error(f"Lỗi khi thêm hoạt động mới: {e}", exc_info=True)
        
        # Thêm vào danh sách
        self.activity_items.insert(0, (activity_label, time_label))
        
        # Giữ tối đa 5 hoạt động gần đây
        if len(self.activity_items) > 5:
            removed = self.activity_items.pop()
            removed[0].deleteLater()
            removed[1].deleteLater()
        
        # TODO: Cập nhật giao diện
        logger.info(f"Hoạt động mới: {activity} ({formatted_time})")
    
    def update_editor_content(self, content: str):
        """Cập nhật nội dung trong trình soạn thảo"""
        current_index = self.editor_tab.currentIndex()
        widget = self.editor_tab.widget(current_index)
        
        if isinstance(widget, QTextEdit):
            # Lưu vị trí con trỏ
            cursor = widget.textCursor()
            position = cursor.position()
            
            # Cập nhật nội dung
            widget.setPlainText(content)
            
            # Khôi phục vị trí con trỏ nếu có thể
            try:
                new_cursor = widget.textCursor()
                new_cursor.setPosition(min(position, len(content)))
                widget.setTextCursor(new_cursor)
            except Exception:
                pass
    
    def save_snapshot(self, file_path: str, content: str):
        """Lưu snapshot vào cơ sở dữ liệu"""
        # Tính toán hash của nội dung
        content_hash = hashlib.md5(content.encode()).hexdigest()
        
        # Tạo metadata
        metadata = {
            "timestamp": datetime.datetime.now().isoformat(),
            "file_path": file_path,
            "file_name": os.path.basename(file_path),
            "hash": content_hash,
            "size": len(content)
        }
        
        # TODO: Lưu vào cơ sở dữ liệu
        logger.info(f"Lưu snapshot cho {file_path} (hash: {content_hash[:8]})")
        
        # Tìm task liên quan
        task_ids = ultis.extract_task_references(content)
        if task_ids:
            logger.info(f"Tìm thấy tham chiếu đến các task: {', '.join(task_ids)}")
    
    def update_ui(self):
        """Cập nhật giao diện định kỳ"""
        # Cập nhật thời gian hiện tại
        self.update_current_date()
        
        # Cập nhật thời gian cho các hoạt động gần đây
        for i, (activity_label, time_label) in enumerate(self.activity_items):
            # Giả định thời gian tăng dần
            minutes_ago = (i + 1) * 5
            time_ago = datetime.datetime.now() - datetime.timedelta(minutes=minutes_ago)
            formatted_time = ultis.format_time_ago(time_ago)
            time_label.setText(formatted_time)
    
    # ----- Các phương thức menu và điều hướng -----
    
    def show_projects(self):
        """Hiển thị trang dự án"""
        logger.info("Hiển thị trang dự án")
        # TODO: Implement
        self.update_status_bar("Projects view - Not implemented yet")
    
    def show_tasks(self):
        """Hiển thị trang quản lý task"""
        logger.info("Hiển thị trang quản lý task")
        # TODO: Implement
        self.update_status_bar("Tasks view - Not implemented yet")
    
    def show_analytics(self):
        """Hiển thị trang phân tích"""
        logger.info("Hiển thị trang phân tích")
        # TODO: Implement
        self.update_status_bar("Analytics view - Not implemented yet")
    
    def show_terminal(self):
        """Hiển thị terminal"""
        logger.info("Hiển thị terminal")
        # TODO: Implement
        self.update_status_bar("Terminal view - Not implemented yet")
    
    def search(self):
        """Thực hiện tìm kiếm"""
        search_text = self.sender().text()
        logger.info(f"Tìm kiếm: {search_text}")
        # TODO: Implement
        self.update_status_bar(f"Searching for: {search_text} - Not implemented yet")
    
    # ----- Xử lý sự kiện cửa sổ -----
    
    def closeEvent(self, event):
        """Xử lý sự kiện đóng cửa sổ"""
        # Ngắt kết nối API client
        if self.api_client:
            self.api_client.disconnect()
        
        logger.info("Đóng ứng dụng")
        super().closeEvent(event)


# ----- Hàm main -----

def main():
    """Khởi chạy ứng dụng"""
    app = QApplication(sys.argv)
    
    # Thiết lập icon và theme
    # app.setWindowIcon(QIcon("path/to/icon.png"))
    
    # Khởi tạo và hiển thị cửa sổ chính
    window = MainWindow()
    window.show()
    
    sys.exit(app.exec())


if __name__ == "__main__":
    main()
"""
WindSurf Memory Tracker - Giao diện chính
----------------------------------------
Tạo cửa sổ chính của ứng dụng với các tính năng:
- Kết nối và nhận thông báo từ WindSurf Editor
- Hiển thị code editor và lịch sử thay đổi
- Hiển thị bảng Kanban cho quản lý task
- Hiển thị thống kê và phân tích
"""

import os
import sys
import datetime
import json
import logging
from typing import List, Dict, Any, Optional, Tuple, Callable
import hashlib
import time
import random

from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
    QLineEdit, QPushButton, QTabWidget, QScrollArea, QSplitter, QFrame, 
    QTextEdit, QToolBar, QStatusBar, QMessageBox, QMenu, QFileDialog, 
    QSizePolicy, QComboBox, QToolButton, QDialog, QDialogButtonBox,
    QFormLayout, QDateTimeEdit, QProgressBar, QListWidget, QListWidgetItem
)
from PyQt6.QtGui import (
    QPixmap, QIcon, QColor, QPalette, QFont, QTextCharFormat, QSyntaxHighlighter,
    QAction, QKeySequence, QTextCursor, QDrag
)
from PyQt6.QtCore import (
    Qt, QSize, QRegularExpression, QDateTime, pyqtSignal, pyqtSlot,
    QTimer, QThread, QObject, QMimeData, QPoint, QUrl
)

# Nhập các module tùy chỉnh
try:
    import models
    from api_client import WindSurfAPIClient
    import ultis
    import ai_helper
    from settings import get_settings, Settings
except ImportError as e:
    print(f"Lỗi khi import module: {e}")
    print("Đảm bảo các file models.py, api_client.py, ultis.py, ai_helper.py và settings.py tồn tại trong cùng thư mục.")
    sys.exit(1)

# Khởi tạo logging
logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("windsurf_app")


# ----- Highlight cú pháp mã nguồn -----

class CodeHighlighter(QSyntaxHighlighter):
    """Syntax highlighter cho trình soạn thảo mã"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        self.highlighting_rules = []
        
        # Class format
        class_format = QTextCharFormat()
        class_format.setForeground(QColor("#C678DD"))
        class_format.setFontWeight(QFont.Weight.Bold)
        pattern = QRegularExpression("\\bclass\\b")
        rule = (pattern, class_format)
        self.highlighting_rules.append(rule)
        
        # Function definition format (def)
        def_format = QTextCharFormat()
        def_format.setForeground(QColor("#61AFEF"))
        def_format.setFontWeight(QFont.Weight.Bold)
        pattern = QRegularExpression("\\bdef\\b")
        rule = (pattern, def_format)
        self.highlighting_rules.append(rule)
        
        # Function name format
        function_format = QTextCharFormat()
        function_format.setForeground(QColor("#61AFEF"))
        pattern = QRegularExpression("(?<=def\\s)\\w+")
        rule = (pattern, function_format)
        self.highlighting_rules.append(rule)
        
        # Special function format (get_content, push, etc)
        special_func_format = QTextCharFormat()
        special_func_format.setForeground(QColor("#61AFEF"))
        pattern = QRegularExpression("\\b(get_content|push|now)\\b")
        rule = (pattern, special_func_format)
        self.highlighting_rules.append(rule)
        
        # Self property access
        self_property_format = QTextCharFormat()
        self_property_format.setForeground(QColor("#E06C75"))
        pattern = QRegularExpression("self\\.(\\w+)")
        rule = (pattern, self_property_format)
        self.highlighting_rules.append(rule)
        
        # Self keyword
        self_format = QTextCharFormat()
        self_format.setForeground(QColor("#E06C75"))
        pattern = QRegularExpression("\\bself\\b")
        rule = (pattern, self_format)
        self.highlighting_rules.append(rule)
        
        # Self method with green (analyze_changes, history.push)
        self_method_format = QTextCharFormat()
        self_method_format.setForeground(QColor("#00FF00"))
        pattern = QRegularExpression("self\\.(analyze_changes|history\\.push)")
        rule = (pattern, self_method_format)
        self.highlighting_rules.append(rule)
        
        # String format - double quotes
        string_format = QTextCharFormat()
        string_format.setForeground(QColor("#98C379"))
        pattern = QRegularExpression("\".*\"")
        pattern.setPatternOptions(QRegularExpression.PatternOption.InvertedGreedinessOption)
        rule = (pattern, string_format)
        self.highlighting_rules.append(rule)
        
        # String format - single quotes
        string_format = QTextCharFormat()
        string_format.setForeground(QColor("#98C379"))
        pattern = QRegularExpression("'.*'")
        pattern.setPatternOptions(QRegularExpression.PatternOption.InvertedGreedinessOption)
        rule = (pattern, string_format)
        self.highlighting_rules.append(rule)
        
        # Comment format
        comment_format = QTextCharFormat()
        comment_format.setForeground(QColor("#5C6370"))
        comment_format.setFontItalic(True)
        pattern = QRegularExpression("#.*")
        rule = (pattern, comment_format)
        self.highlighting_rules.append(rule)
        
        # Number format
        number_format = QTextCharFormat()
        number_format.setForeground(QColor("#D19A66"))
        pattern = QRegularExpression("\\b[0-9]+\\b")
        rule = (pattern, number_format)
        self.highlighting_rules.append(rule)
        
        # Keywords
        keyword_format = QTextCharFormat()
        keyword_format.setForeground(QColor("#C678DD"))
        keywords = [
            "\\bimport\\b", "\\bfrom\\b", "\\breturn\\b",
            "\\bif\\b", "\\belif\\b", "\\belse\\b", "\\bfor\\b", "\\bwhile\\b",
            "\\bin\\b", "\\btry\\b", "\\bexcept\\b", "\\bfinally\\b", "\\bwith\\b",
            "\\bas\\b", "\\bassert\\b", "\\bbreak\\b", "\\bcontinue\\b", "\\bdel\\b"
        ]
        for pattern in keywords:
            expression = QRegularExpression(pattern)
            rule = (expression, keyword_format)
            self.highlighting_rules.append(rule)
    
    def highlightBlock(self, text):
        for pattern, format in self.highlighting_rules:
            matches = pattern.globalMatch(text)
            while matches.hasNext():
                match = matches.next()
                self.setFormat(match.capturedStart(), match.capturedLength(), format)


# ----- Task Dialog -----

class TaskDialog(QDialog):
    """Dialog để tạo hoặc chỉnh sửa task"""
    
    def __init__(self, parent=None, task=None):
        super().__init__(parent)
        
        self.task = task
        self.setup_ui()
        
        if task:
            self.setWindowTitle("Edit Task")
            self.fill_form_data()
        else:
            self.setWindowTitle("Create New Task")
    
    def setup_ui(self):
        """Thiết lập giao diện dialog"""
        self.setMinimumWidth(400)
        
        layout = QVBoxLayout(self)
        
        # Form
        form_layout = QFormLayout()
        
        # Task ID
        self.id_field = QLineEdit()
        if not self.task:
            task_id = f"TASK-{random.randint(100, 999)}"
            self.id_field.setText(task_id)
        form_layout.addRow("Task ID:", self.id_field)
        
        # Title
        self.title_field = QLineEdit()
        form_layout.addRow("Title:", self.title_field)
        
        # Description
        self.description_field = QTextEdit()
        self.description_field.setMinimumHeight(100)
        form_layout.addRow("Description:", self.description_field)
        
        # Status
        self.status_field = QComboBox()
        self.status_field.addItems(["todo", "in_progress", "done"])
        form_layout.addRow("Status:", self.status_field)
        
        # Priority
        self.priority_field = QComboBox()
        self.priority_field.addItems(["Low", "Medium", "High"])
        form_layout.addRow("Priority:", self.priority_field)
        
        # Due date
        self.due_date_field = QDateTimeEdit()
        self.due_date_field.setDateTime(QDateTime.currentDateTime().addDays(7))
        self.due_date_field.setCalendarPopup(True)
        form_layout.addRow("Due Date:", self.due_date_field)
        
        layout.addLayout(form_layout)
        
        # Buttons
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)
        
        layout.addWidget(button_box)
    
    def fill_form_data(self):
        """Điền dữ liệu từ task vào form"""
        if not self.task:
            return
        
        self.id_field.setText(self.task.get("id", ""))
        self.title_field.setText(self.task.get("title", ""))
        self.description_field.setText(self.task.get("description", ""))
        
        # Thiết lập status
        status_index = self.status_field.findText(self.task.get("status", "todo"))
        if status_index >= 0:
            self.status_field.setCurrentIndex(status_index)
        
        # Thiết lập priority
        priority_index = self.priority_field.findText(self.task.get("priority", "Medium"))
        if priority_index >= 0:
            self.priority_field.setCurrentIndex(priority_index)
        
        # Thiết lập due date
        due_date = self.task.get("due_date")
        if due_date:
            if isinstance(due_date, str):
                due_date = QDateTime.fromString(due_date, Qt.DateFormat.ISODate)
            self.due_date_field.setDateTime(due_date)
    
    def get_task_data(self):
        """Lấy dữ liệu task từ form"""
        return {
            "id": self.id_field.text(),
            "title": self.title_field.text(),
            "description": self.description_field.toPlainText(),
            "status": self.status_field.currentText(),
            "priority": self.priority_field.currentText(),
            "due_date": self.due_date_field.dateTime().toString(Qt.DateFormat.ISODate)
        }


# ----- Task Card cho bảng Kanban -----

class TaskCard(QFrame):
    """Widget thẻ công việc Kanban"""
    
    taskMoved = pyqtSignal(str, str)  # id, new_status
    taskSelected = pyqtSignal(str)    # id
    taskEditRequested = pyqtSignal(str)  # id
    
    def __init__(self, task_id: str, title: str, status="todo", priority="High", parent=None):
        super().__init__(parent)
        
        self.task_id = task_id
        self.status = status
        self.title = title
        self.priority = priority
        
        # Thiết lập style
        self.setStyleSheet("""
            QFrame {
                background-color: #15151f;
                padding: 5px;
                margin: 0px;
                border: none;
            }
        """)
        
        # Thiết lập sự kiện
        self.setMinimumHeight(70)
        self.setMouseTracking(True)
        self.setAcceptDrops(True)
        
        # Tạo layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 5, 5, 5)
        
        # Task ID label
        id_label = QLabel(f"[{task_id}]")
        id_label.setStyleSheet("color: #00ff00; font-weight: bold; font-size: 12px;")
        
        # Task title label
        title_label = QLabel(title)
        title_label.setStyleSheet("color: #ffffff; font-size: 12px;")
        title_label.setWordWrap(True)
        
        # Task priority label
        priority_label = QLabel(f"Priority: {priority}")
        priority_label.setStyleSheet("color: #6b6b8d; font-size: 10px;")
        
        # Thêm widget vào layout
        layout.addWidget(id_label)
        layout.addWidget(title_label)
        layout.addWidget(priority_label)
        
        # Thanh trạng thái bên trái
        indicator_color = "#00ff00"  # Màu mặc định
        if status == "in_progress":
            indicator_color = "#FFD700"  # Vàng
        
        indicator = QFrame(self)
        indicator.setFixedWidth(4)
        indicator.setFixedHeight(70)
        indicator.setStyleSheet(f"background-color: {indicator_color}; border: none;")
        indicator.move(0, 0)
    
    def mousePressEvent(self, event):
        """Xử lý sự kiện click chuột"""
        if event.button() == Qt.MouseButton.LeftButton:
            self.taskSelected.emit(self.task_id)
        elif event.button() == Qt.MouseButton.RightButton:
            self.showContextMenu(event.pos())
        
        super().mousePressEvent(event)
    
    def mouseDoubleClickEvent(self, event):
        """Xử lý sự kiện double click"""
        if event.button() == Qt.MouseButton.LeftButton:
            self.taskEditRequested.emit(self.task_id)
        
        super().mouseDoubleClickEvent(event)
    
    def mouseMoveEvent(self, event):
        """Xử lý sự kiện di chuột (để kéo thả)"""
        if event.buttons() & Qt.MouseButton.LeftButton:
            # Tạo mime data để kéo thả
            mime_data = QMimeData()
            mime_data.setText(self.task_id)
            mime_data.setData("application/x-task", self.task_id.encode())
            
            # Tạo pixmap để hiển thị khi kéo
            pixmap = QPixmap(self.size())
            self.render(pixmap)
            
            # Tạo drag object
            drag = QDrag(self)
            drag.setMimeData(mime_data)
            drag.setPixmap(pixmap)
            drag.setHotSpot(event.pos())
            
            # Thực hiện kéo
            drag.exec(Qt.DropAction.MoveAction)
        
        super().mouseMoveEvent(event)
    
    def showContextMenu(self, pos):
        """Hiển thị menu ngữ cảnh khi click chuột phải"""
        context_menu = QMenu(self)
        
        edit_action = context_menu.addAction("Edit Task")
        
        if self.status == "todo":
            move_action = context_menu.addAction("Move to In Progress")
        elif self.status == "in_progress":
            move_action = context_menu.addAction("Move to Done")
        else:
            move_action = context_menu.addAction("Move to To Do")
        
        delete_action = context_menu.addAction("Delete Task")
        
        # Hiển thị menu và xử lý hành động
        action = context_menu.exec(self.mapToGlobal(pos))
        
        if action == edit_action:
            self.taskEditRequested.emit(self.task_id)
        elif action == move_action:
            new_status = ""
            if self.status == "todo":
                new_status = "in_progress"
            elif self.status == "in_progress":
                new_status = "done"
            else:
                new_status = "todo"
            
            self.taskMoved.emit(self.task_id, new_status)
        elif action == delete_action:
            self.parent().parent().parent().remove_task(self.task_id)


class KanbanColumn(QWidget):
    """Widget cho một cột Kanban"""
    
    taskMoved = pyqtSignal(str, str)  # task_id, new_status
    
    def __init__(self, title: str, status: str, parent=None):
        super().__init__(parent)
        
        self.title = title
        self.status = status
        
        # Thiết lập kích thước
        self.setMinimumWidth(255)
        self.setAcceptDrops(True)
        
        # Tạo layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        
        # Tạo tiêu đề
        header = QFrame()
        header.setStyleSheet("""
            QFrame {
                background-color: #0a0a12;
                border: none;
            }
        """)
        header.setFixedHeight(30)
        
        # Thêm tiêu đề vào header
        header_layout = QHBoxLayout(header)
        header_layout.setContentsMargins(0, 0, 0, 0)
        title_label = QLabel(title)
        title_label.setStyleSheet("color: #ffffff; font-weight: bold; font-size: 12px;")
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        # Thêm nút "+" để tạo task mới
        add_button = QPushButton("+")
        add_button.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                color: #00ff00;
                font-weight: bold;
                font-size: 16px;
                border: none;
                max-width: 20px;
            }
            QPushButton:hover {
                color: #ffffff;
            }
        """)
        add_button.clicked.connect(self.add_new_task)
        
        header_layout.addWidget(title_label)
        header_layout.addWidget(add_button, 0, Qt.AlignmentFlag.AlignRight)
        
        # Tạo vùng nội dung
        content = QWidget()
        content.setStyleSheet("""
            QWidget {
                background-color: #121218;
                border: none;
            }
        """)
        
        # Tạo vùng cuộn
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: transparent;
            }
            QScrollBar:vertical {
                border: none;
                background: #121218;
                width: 10px;
                margin: 0px;
            }
            QScrollBar::handle:vertical {
                background: #2a2a3a;
                min-height: 20px;
                border-radius: 5px;
            }
            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                border: none;
                background: none;
            }
            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
                background: none;
            }
        """)
        
        # Tạo container cho task
        task_container = QWidget()
        self.task_layout = QVBoxLayout(task_container)
        self.task_layout.setSpacing(10)
        self.task_layout.setContentsMargins(10, 10, 10, 10)
        self.task_layout.addStretch()
        
        # Thêm task container vào scroll area
        scroll.setWidget(task_container)
        
        # Tạo layout nội dung
        content_layout = QVBoxLayout(content)
        content_layout.setContentsMargins(0, 0, 0, 0)
        content_layout.addWidget(scroll)
        
        # Thêm header và content vào layout
        layout.addWidget(header)
        layout.addWidget(content, 1)
    
    def add_task(self, task_id: str, title: str, priority: str = "Medium") -> TaskCard:
        """Thêm task vào cột"""
        task_card = TaskCard(task_id, title, self.status, priority)
        task_card.taskSelected.connect(self.on_task_selected)
        task_card.taskMoved.connect(self.on_task_moved)
        task_card.taskEditRequested.connect(self.on_task_edit_requested)
        
        self.task_layout.insertWidget(self.task_layout.count() - 1, task_card)
        return task_card
    
    def remove_task(self, task_id: str) -> bool:
        """Xóa task khỏi cột"""
        for i in range(self.task_layout.count() - 1):
            widget = self.task_layout.itemAt(i).widget()
            if isinstance(widget, TaskCard) and widget.task_id == task_id:
                widget.setParent(None)
                return True
        return False
    
    def get_task_count(self) -> int:
        """Lấy số lượng task trong cột"""
        return self.task_layout.count() - 1  # Trừ 1 cho stretch item
    
    def add_new_task(self):
        """Mở dialog để tạo task mới"""
        dialog = TaskDialog(self)
        
        if dialog.exec() == QDialog.DialogCode.Accepted:
            task_data = dialog.get_task_data()
            
            # Thêm task mới
            task_card = self.add_task(task_data["id"], task_data["title"], task_data["priority"])
            
            # Thông báo task mới được tạo
            # TODO: Lưu vào cơ sở dữ liệu
            print(f"Đã tạo task mới: {task_data}")
    
    def on_task_selected(self, task_id: str):
        """Xử lý khi task được chọn"""
        # Truyền sự kiện lên parent widget
        parent = self.parent()
        while parent:
            if hasattr(parent, "on_task_selected"):
                parent.on_task_selected(task_id)
                break
            parent = parent.parent()
    
    def on_task_moved(self, task_id: str, new_status: str):
        """Xử lý khi task được di chuyển"""
        # Truyền sự kiện lên parent widget
        self.taskMoved.emit(task_id, new_status)
    
    def on_task_edit_requested(self, task_id: str):
        """Xử lý khi yêu cầu chỉnh sửa task"""
        # Truyền sự kiện lên parent widget
        parent = self.parent()
        while parent:
            if hasattr(parent, "on_task_edit_requested"):
                parent.on_task_edit_requested(task_id)
                break
            parent = parent.parent()
    
    def dragEnterEvent(self, event):
        """Xử lý sự kiện khi kéo vào vùng"""
        if event.mimeData().hasFormat("application/x-task"):
            event.accept()
        else:
            event.ignore()
    
    def dragMoveEvent(self, event):
        """Xử lý sự kiện khi kéo trong vùng"""
        if event.mimeData().hasFormat("application/x-task"):
            event.accept()
        else:
            event.ignore()
    
    def dropEvent(self, event):
        """Xử lý sự kiện khi thả vào vùng"""
        if event.mimeData().hasFormat("application/x-task"):
            task_id = event.mimeData().data("application/x-task").data().decode()
            
            # Tìm task card nguồn
            source_card = None
            for column in self.parent().findChildren(KanbanColumn):
                for i in range(column.task_layout.count() - 1):
                    widget = column.task_layout.itemAt(i).widget()
                    if isinstance(widget, TaskCard) and widget.task_id == task_id:
                        source_card = widget
                        break
                if source_card:
                    break
            
            if source_card and source_card.status != self.status:
                # Di chuyển task sang cột mới
                self.taskMoved.emit(task_id, self.status)
                event.accept()
            else:
                event.ignore()
        else:
            event.ignore()


# ----- Widget Snapshot -----

class SnapshotList(QWidget):
    """Widget hiển thị danh sách snapshot"""
    
    snapshotSelected = pyqtSignal(dict)  # snapshot_data
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # Thiết lập layout
        layout = QVBoxLayout(self)
        
        # Tiêu đề
        title = QLabel("Snapshots")
        title.setStyleSheet("color: #00ff00; font-weight: bold; font-size: 14px;")
        
        # Danh sách snapshot
        self.list_widget = QListWidget()
        self.list_widget.setStyleSheet("""
            QListWidget {
                background-color: #15151f;
                border: none;
                color: #ffffff;
            }
            QListWidget::item {
                padding: 5px;
                border-bottom: 1px solid #2a2a3a;
            }
            QListWidget::item:selected {
                background-color: #2a2a3a;
                color: #00ff00;
            }
        """)
        self.list_widget.currentItemChanged.connect(self.on_item_selected)
        
        # Thêm widget vào layout
        layout.addWidget(title)
        layout.addWidget(self.list_widget)
    
    def add_snapshot(self, snapshot_data: dict):
        """Thêm snapshot vào danh sách"""
        timestamp = snapshot_data.get("timestamp", datetime.datetime.now())
        formatted_time = timestamp.strftime("%H:%M:%S")
        
        item = QListWidgetItem(f"{formatted_time} - Snapshot #{snapshot_data.get('id', 0)}")
        item.setData(Qt.ItemDataRole.UserRole, snapshot_data)
        
        self.list_widget.addItem(item)
    
    def clear_snapshots(self):
        """Xóa tất cả snapshot"""
        self.list_widget.clear()
    
    def on_item_selected(self, current, previous):
        """Xử lý khi chọn snapshot"""
        if current:
            snapshot_data = current.data(Qt.ItemDataRole.UserRole)
            self.snapshotSelected.emit(snapshot_data)


# ----- Tạo cửa sổ chính -----

class MainWindow(QMainWindow):
    """Cửa sổ chính của ứng dụng"""
    
    def __init__(self):
        super().__init__()
        
        # Thiết lập thuộc tính chính
        self.api_client = None
        self.current_project = None
        self.current_file = None
        self.current_task = None
        self.snapshots = {}  # {file_path: [snapshot1, snapshot2, ...]}
        self.tasks = {}  # {task_id: task_data}
        self.settings = get_settings()
        
        # Thiết lập cửa sổ
        self.setWindowTitle("WindSurf Memory Tracker")
        self.resize(1200, 800)
        
        # Thiết lập style
        self.apply_theme()
        
        # Tạo widget chính
        self.central_widget = QWidget()
        self.main_layout = QVBoxLayout(self.central_widget)
        self.main_layout.setContentsMargins(0, 0, 0, 0)
        self.main_layout.setSpacing(0)
        self.setCentralWidget(self.central_widget)
        
        # Tạo thanh công cụ
        self.create_toolbar()
        
        # Tạo widgets và layout chính
        self.create_main_layout()
        
        # Tạo thanh trạng thái
        self.create_status_bar()
        
        # Khởi tạo API client (giả lập)
        self.init_api_client()
        
        # Khởi tạo cơ sở dữ liệu
        self.init_database()
        
        # Tạo dữ liệu demo
        self.load_sample_data()
        
        # Thiết lập timer cập nhật
        self.update_timer = QTimer(self)
        self.update_timer.timeout.connect(self.update_ui)
        self.update_
    def move_task(self, task_id: str, new_status: str):
        """Di chuyển task sang trạng thái mới"""
        logger.info(f"Di chuyển task {task_id} sang {new_status}")
        
        try:
            # Kiểm tra task có tồn tại không
            if task_id not in self.tasks:
                logger.warning(f"Task {task_id} không tồn tại trong self.tasks")
                return
            
            # Lấy dữ liệu task
            task = self.tasks.get(task_id)
            
            # Nếu đã ở trạng thái đó rồi thì không làm gì
            if task["status"] == new_status:
                logger.info(f"Task {task_id} đã ở trạng thái {new_status}, không cần di chuyển")
                return
            
            # Xóa task khỏi cột cũ
            old_status = task["status"]
            logger.info(f"Trạng thái cũ của task {task_id}: {old_status}")
            
            removed = False
            if old_status == "todo":
                removed = self.todo_column.remove_task(task_id)
            elif old_status == "in_progress":
                removed = self.in_progress_column.remove_task(task_id)
            else:
                removed = self.done_column.remove_task(task_id)
            
            logger.info(f"Đã xóa task {task_id} khỏi cột {old_status}: {removed}")
            
            # Cập nhật trạng thái
            task["status"] = new_status
            
            # Thêm vào cột mới
            task_card = None
            if new_status == "todo":
                task_card = self.todo_column.add_task(task_id, task["title"], task["priority"])
            elif new_status == "in_progress":
                task_card = self.in_progress_column.add_task(task_id, task["title"], task["priority"])
            else:
                task_card = self.done_column.add_task(task_id, task["title"], task["priority"])
            
            logger.info(f"Đã thêm task {task_id} vào cột {new_status}: {task_card is not None}")
            
            # Thêm vào hoạt động gần đây
            status_names = {
                "todo": "To Do",
                "in_progress": "In Progress",
                "done": "Done"
            }
            activity_msg = f"Moved {task_id} to {status_names.get(new_status, new_status)}"
            logger.info(f"Thêm hoạt động: {activity_msg}")
            self.add_recent_activity(activity_msg)
            
            # Cập nhật trạng thái
            status_msg = f"Moved task {task_id} to {status_names.get(new_status, new_status)}"
            self.update_status_bar(status_msg)
        except Exception as e:
            logger.error(f"Lỗi khi di chuyển task {task_id}: {e}", exc_info=True)
